import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import java.util.Arrays; 
import java.util.Collections; 
import java.util.List; 
import ddf.minim.*; 
import ddf.minim.effects.*; 
import java.nio.charset.StandardCharsets; 
import java.io.*; 
import java.math.BigInteger; 
import java.util.Arrays; 
import java.util.Map; 
import java.util.HashMap; 
import java.util.Locale; 
import java.util.Arrays; 
import java.util.Collections; 
import java.util.List; 
import java.util.Arrays; 
import java.util.Collections; 
import java.util.List; 
import java.util.Arrays; 
import java.util.Collections; 
import java.util.List; 
import java.math.BigDecimal; 
import java.util.Arrays; 
import java.util.Collections; 
import java.util.List; 
import java.util.Arrays; 
import java.util.Collections; 
import java.util.List; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class ms_pain extends PApplet {









// import processing.sound.*;













/*
import java.lang.Character.*;
import java.lang.Character;
import java.lang.*;

*/



//                               da upgrades
double movementUP=1000000;
int maxlife = 1000000;
int ult=1000000;
double bulletS=1000000;
double reload=1000000;
int shield=1000000;
int bulletD=1000000;

//                               da upgrades cost
int movementUpC=500;
int maxLifeC=1500;
int ultC=3000;
int bulletSC=500;
int reloadC=1500;
int shieldC=3000;
int bulletDC=7500;

//                              da upgrades boolean

boolean movementUpB=false;
boolean maxLifeB=false;
boolean ultB=false;
boolean bulletSB=false;
boolean reloadCB=false;
boolean shieldB=false;
boolean bulletDB=false;





//                                da variables
int life = maxlife;
Characters player;
boolean[] keys = {false, false, false, false, false};
ArrayList<Bullet> bullets = new ArrayList<Bullet>();
// Bullet bill;
int frame=0;
int frameMAX=15;
Nongamer f;
Nongamer f2;
ArrayList<Nongamer> enemyOne = new ArrayList<Nongamer>();
ArrayList<Nongamer> enemyTwo = new ArrayList<Nongamer>();
ArrayList<Boss> bossBattle = new ArrayList<Boss>();

boolean game=true;
int invincibility=0;
int maxInvincibility=60;
boolean level=true;
int selected;
float xbox1=Math.abs(-1920*.333f*1-333+500+67+100);
float ybox1= Math.abs(+15+(1080*.1667f*2)-370-170-1.5f);
boolean tester=false;
int gold=100000;
boolean setupE=false;
int spawn1=0;
int spawn2=0;
int spawn1max=0;
int spawn2max=0;
int enemyCounterLVL1_1=0;
int enemyCounterLVL1_2=0;
boolean testMode=true;
boolean shop=false;
double ultdurationMAX=300;
double shielddurationMAX=600;
double ultduration=0;
double shieldduration=0;
double ultCount=270;
double shieldCount=270;
double xfactor;
double yfactor;
boolean levelSelect=true;
int enemyt1l=1;
int enemyt2l=1;
int wave1t;
int wave2t;
int shopFRAME=0;
int trueframe=0;
boolean dead=false;
boolean victory=false;
int crash= 0;
int vicded =120;
int newGamePlus=0;
int newgame=0;
boolean newgamescreen=false;
int currentLVL;


//                                                                   konami code booleans
boolean b1=false;
boolean b2=false;
boolean b3=false;
boolean b4=false;
boolean b5=false;
boolean b6=false;
boolean b7=false;
boolean b8=false;
boolean b9=false;
boolean b10=false;
int konami=0;


//   //////                                                        da songs

// SoundFile one;

//                                                                 da songs int

// ArrayList<SoundFile> sounds;
ArrayList <AudioPlayer> sounds;
Minim minim;
boolean song=false;
int onex=0;
boolean playing=false;
AudioPlayer menu;

// da byte arraylists
/*
ArrayList <Byte> goldby;
 ArrayList <Byte> currentlvlby;
 ArrayList <Byte> movementUPby;
 ArrayList <Byte> ultby;
 ArrayList <Byte> maxlifeby;
 ArrayList <Byte> bulletSby;
 ArrayList <Byte> reloadby;
 ArrayList <Byte> shieldby;
 ArrayList <Byte> bulletby;
 */

 String str1;
   String str2;           /// bookmark
   String str3;
   String str4;
   String str5;
   String str6;
   String str7;
   String str8;
   String str9;
   String str10;
   String str11;

char ch1[];
char ch2[];
char ch3[];
char ch4[];
char ch5[];
char ch6[];
char ch7[];
char ch8[];
char ch9[];
char ch10[];
char ch11[];



BigInteger encrypted1;
BigInteger encrypted2;
BigInteger encrypted3;
BigInteger encrypted4;
BigInteger encrypted5;
BigInteger encrypted6;
BigInteger encrypted7;
BigInteger encrypted8;
BigInteger encrypted9;
BigInteger encrypted10;
BigInteger encrypted11;


StringBuffer sb1;                             // do sb.toString for result
StringBuffer sb2;
StringBuffer sb3;
StringBuffer sb4;
StringBuffer sb5;
StringBuffer sb6;
StringBuffer sb7;
StringBuffer sb8;
StringBuffer sb9;
StringBuffer sb10;
StringBuffer sb11;


String result1;
String result2;
String result3;
String result4;
String result5;
String result6;
String result7;
String result8;
String result9;
String result10;
String result11;



 //                          RSA 1
int e=65537;
 BigInteger encrypted;
 
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN1= new BigInteger("22508596715135020080577907720027095375151286516226140247297803289633794096365144861127048019114326694676315396103676832085809262889996818942777556121422334429179344045501953310909567665727054460146099951466341892821541583255005917018170773306453079773398474960454845641619119736236595012784770994488853317946737984640067433256353352979861431808291868893409347432641618366575922234031105319358374625480364335941904336331895675020335647111859319941653180680836726969178886483255515003662542330390002486137142407615606609874856198631544881636443689269797298004356080860663353821129460287034984935757373745598536068366029");
  BigInteger bigE1 = new BigInteger(""+e);
  BigInteger bigPhi1 = new BigInteger("22508596715135020080577907720027095375151286516226140247297803289633794096365144861127048019114326694676315396103676832085809262889996818942777556121422334429179344045501953310909567665727054460146099951466341892821541583255005917018170773306453079773398474960454845641619119736236595012784770994488853317946437560040117729838820239111410718526782716377318554681521445969795896236754228825760313710965919202296311431666794790612141661453356290065810613103996837446273124240539207268396794391057249688265869871819239735327906830709062524699770681901159684291041293842032478851232915210913995018656455611049491946937184");
  BigInteger d1= new BigInteger("12119273880204608901587692901972872034163349669622836121677793989369481243853653153403270571592951250057877861090840965772189014748910046996868816437380867525252170733076390840015043627576949978411819719965711069655213663248537372687492440570438223079541510687543984896406821766827604684622979600569573935797731696311024830749385076789055800916346212258822342173838400658195947182604429140403194987851967451842927529322767105243307487491105534393583153098261080045876981477270961546606003992816838881087595559254856226872085208893154848544803821539683259526343502690141448055654910646619804724404997927080937826442657");

  //                          RSA 2

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN2= new BigInteger("27534570955554689616706617174431177702411166713321459886333463527830029134339872374371650760292729393346349830157923648775882777490659493970805701454915509693005948454421176241967493333063911864319491427586273053597153825532973424361275634118715489191779269465526747322058529158437851715017461139122140746758383019437712029147232361563353604926982913505281129125522879174822540664668993738550575480602117384498710080303981469304467355526115427136704740368681779616393058571129439627346688357461882239826024120167593126546094758852374262950780768967149251877115098652774254021751140595141898722914446763552215207547931");
  BigInteger bigE2 = new BigInteger(""+e);
  BigInteger bigPhi2 = new BigInteger("27534570955554689616706617174431177702411166713321459886333463527830029134339872374371650760292729393346349830157923648775882777490659493970805701454915509693005948454421176241967493333063911864319491427586273053597153825532973424361275634118715489191779269465526747322058529158437851715017461139122140746758050175515712825315828338957640523190451587913150908589470775868708529692734742240383803371514502052025435235606537863132713972961465451067203061700864504527822865390431024591306140195709902662724432545945169069822617566021010531481052886665401980044383374234662737952748263048579251059520911383998957639162392");
  BigInteger d2= new BigInteger("4262297974336669761531480403964238488044330474489924936247508849807523163524085710941916733496646775035456597448039053005650712996364505032787949421855102397661555259931074552920643603825829468293044242685242536715796047424081288282117602394591889129050775725586597671273994511685795896193785850075440100643307124686923518208478851621607078562752816872589773221846911228589163888075346140786024462578613963376383424099795941551816275625891740559939805925740732691987167087079401627764481015082731319916068300023097490171207946767217782960393083833872516098543865779798487518968386234155309245141517707412140092608793");

  //                          RSA 3

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN3= new BigInteger("27228491206829563910083554349822168862521314264062179776765589532621653002444705519783295839846408712609800470378798756695537966678542040746726094505909268928572286927867411732194586500734036109576711768450292737422828647382609429786761047980917212097362311554111841860212309142634647151415300618057848131747594662600317865025601599756440588756355007981208577134553068639923869920211928624785087588528294557045900935581011629477980798466317300896326364688250463876390602532904530339874470867827374590109491645861296097135087300311171498754804233011700572795607108140074659909137406420252191560741655967866614798266191");
  BigInteger bigE3 = new BigInteger(""+e);
  BigInteger bigPhi3 = new BigInteger("27228491206829563910083554349822168862521314264062179776765589532621653002444705519783295839846408712609800470378798756695537966678542040746726094505909268928572286927867411732194586500734036109576711768450292737422828647382609429786761047980917212097362311554111841860212309142634647151415300618057848131747263636636758614232449500283868298761556151304082372288141890427300039589998008932691802283803935590665191720978847016086903679946450151802431155219441823859256058126930944131803247211894084496516674430539134657970147289190950939105516944041881874013767902762295194028500370487887956037234453881123168001657672");
  BigInteger d3= new BigInteger("26093018626939346198466325089433930348380130629112732329828739261894354260425977470199583623383948804289880658889941210545288408979342269665339970388469501591315652352377815988353888804676753647952390342947528649176851707740931117205971296479752271061579605640240476619142985846072087213291522956749700078829594663096189755531299241891268514509678083014199449306261551282422931876806001999004775174817620135742202127719540229157909253022824592730822074132197450381566404849226711861296231714844989589380551763669069579919085865241748672956999651397017703214377822681587307410561015428251448662014932657125889851169697");

  //                          RSA 4

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN4= new BigInteger("24346268486642121943641211582025966581050045432246881394600162863376763803879277633847657771627450747607207665409967587409068637900093007895906158837256696113858941359763377991604339854066261917933702949166900873531590419944828509554857725691761178666670157378278768812291232761748259377143191767239892143802694001884080953391692551519622590790651741991425258727862868501579285587523137918885283386204649523301300703725617220833439960059303612713534957106451549768174966517890454477662108175766945715581212480561691416221406547685523460897311388579068675430630874532154463846530426677172865426256931732430283467015849");
  BigInteger bigE4 = new BigInteger(""+e);
  BigInteger bigPhi4 = new BigInteger("24346268486642121943641211582025966581050045432246881394600162863376763803879277633847657771627450747607207665409967587409068637900093007895906158837256696113858941359763377991604339854066261917933702949166900873531590419944828509554857725691761178666670157378278768812291232761748259377143191767239892143802379355813514179804214532522646204043083070894173425657606887912603786410196182824812729051229368973450824648909459839145103659363778340060606033079446106413203076802311757938053451671603657466777176608407722385352895226985228837590337763219642961778025550036888460347641099995282872122555374677456835113370964");
  BigInteger d4= new BigInteger("19539945010129987215063003921494481227347167854658493896189541273643200014041627237480399638827414771402284449896987734106376570256603020008800647705584096905455947885655338495512407830447400867012448562235528312966539885845828078399621000559393109795812802049835741043345080672523867357040370230023514760697946987754017308444418880878872509978517882203375620125493457090117743585911912666163003118324207373461402348413700323163912101238619053494176064420797194733174674408727835509462952293737595237728500120933789916340035949832858562772390802258113739514508840904989488774670403263070994869681098504044311917362701");

  //                          RSA 5

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN5= new BigInteger("26138853230790817109912727708591191065310280892219358942630341141869958725286622251241791392993719990677357755632021294567039958546358607637581930629763133366253790043159883288176619490495167977171686865663541661973000983343799889025098699614295523898273550578183002789362158319303051917648209032605986102920875771518808277595175529846158472890329128487218350088731235122807821421983967693203502742528134893810825671990232545369963619070257515417595614452120251654774638157957775358034678070875610547068663410963279605166252443209311406919717095495161119149173660806889212432228078669374509207681680269763585364362107");
  BigInteger bigE5 = new BigInteger(""+e);
  BigInteger bigPhi5 = new BigInteger("26138853230790817109912727708591191065310280892219358942630341141869958725286622251241791392993719990677357755632021294567039958546358607637581930629763133366253790043159883288176619490495167977171686865663541661973000983343799889025098699614295523898273550578183002789362158319303051917648209032605986102920551327083621403718554370859282749369813714062077742901422894126571803267574366026563472649609460126472550918394838566702400749149415486217048685836680241767434937529986442244634657020074817059163913533425137399662298687858382460581411981580975137872138757599139194419615998278451736640956311714912508730793456");
  BigInteger d5= new BigInteger("7939731010961026537788313021574451691977535769434224613133683279845053455975720419846351545849306252260771180270177882889757914686091227890219929094201667697972354523233956339437752173539943984643129383932192866089331684017044179483690736732254772025618071796998474701738445239519139639053098207304078083385559535350315871703392920956036158074139518223809170818600569958613682158896545531391413248024406407642844059576819984853513156130390681357443706439885767930548046163380076991072861395831810781646642762254821096709910126786346943601235459623303966761076433885073530117510653184142373335848715951428403974913489");

  //                          RSA 6

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN6= new BigInteger("21702787668020885499935918464560018924528901614253193154780559755065563556725843133845320095783641558900582122540379870523919296250259376647987622078294940633632914362921316814225863713280571588543749640347929831096752932195314575004213169118309330691355842234609913882919378118367749717692762768425898643243537876865741510496083563930764340978003873098736837250741519352272361669818592074589599536713779140157355256903452956539907213157179191666220336039472526613575718029806435824460818664202633736357296196982478844839671689029615860180004190370681731550358578548218476811712945367271638824746211805863621444716883");
  BigInteger bigE6 = new BigInteger(""+e);
  BigInteger bigPhi6 = new BigInteger("21702787668020885499935918464560018924528901614253193154780559755065563556725843133845320095783641558900582122540379870523919296250259376647987622078294940633632914362921316814225863713280571588543749640347929831096752932195314575004213169118309330691355842234609913882919378118367749717692762768425898643243242907244493724370875177339616152698860630728868296477063079687065618468481097238822527203385253678927510874378681297474989583338525651773584153087846641809925773601600834050906352991297193299745574278480968152045953070295777822195894781667157573246477379529714287883367718469714438596518105160837038270419928");
  BigInteger d6= new BigInteger("12667272439646839375368856571194132229138952722102219273947021861708163894775118659014773094647540426187727045049584369246089398662815229191736309561605475824613977451065294578295737350815698375039680047035857788716495920813207396174087342190115026894818860752831201090215176950177810430767101964048209025456467761538007140159523891597036743717851241995219037747236170776654928325317590545484830104885678681147064192238480812228409929381346159141296382561244941674371434331880237180756974146254791005109597743266460072204431036589317381855095094196135183054217506473757281232198330208943294706715451708383636539971361");

  //                          RSA 7

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN7= new BigInteger("28797475818465597593011052082535875006256897887491474794905463937434405968483787566265966414720923954239733257534567769706558078371511465189450884597882461426258713752651601925315271994665549458698224826525301342670468976653869868840957598074069664162052113342458460498831520036767574549242843616545262147231706146472937102160500539969434265164694599433196048852837233149279689783228224294014933404695423883262005903303436167083168127531873214740660105597254738654539674255535179326167082987661824909884628231207394121899877538160129299685349510395844089959736388462502682124362899407500774357468273142940397320197341");
  BigInteger bigE7 = new BigInteger(""+e);
  BigInteger bigPhi7 = new BigInteger("28797475818465597593011052082535875006256897887491474794905463937434405968483787566265966414720923954239733257534567769706558078371511465189450884597882461426258713752651601925315271994665549458698224826525301342670468976653869868840957598074069664162052113342458460498831520036767574549242843616545262147231366468099292533262425699037279389801805739730072923362115722157521065705231133458945511209307103846247763871164028428475149647893468840078228704152204937473875854162943672784204437735287660386608884890448195878505981925547992525384675495309935506788378891729664921772527054676172509876668081186461592535271072");
  BigInteger d7= new BigInteger("20794100251113836075713902340690681796864293128000351888540996229781778135199326777215989878142702355714892304290833430975226939633718923160358029995660340297463129391286323113839428362658617224376704662490758433239156558618659441279897407779715255766067903012117761359021682754779009267952745601198886744791948904738740262013485074927768627852828982425900498226427854794396591122093671188453521323192091113660724929049167910046683656366062314708058302433660287411328364840517317349999337884660847345400190116585745053306354924129997562884767359881472725143757790154003587180391195941842191203344120206706470292302561");

  //                          RSA 8

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN8= new BigInteger("30068772671805906531926504608076873364350305209270451018067262259859127888001765331892417200300961812712325603214621331660765076001450863594776103534379738236658870133715578690949857568775875557131784069487732055666724445855133992765115288412396928360162698478744118634730099180360844704771293432119237110026128431280623142135023509068141888952903790395104581418027779714036552894690891003328319855610466811300083652540370217589520397106269690164211280115903798289588993557706720200873069488261475455071734491610344956467672968170009843343216332810602603728315517995663812010573704407508438993344468521793675259689789");
  BigInteger bigE8 = new BigInteger(""+e);
  BigInteger bigPhi8 = new BigInteger("30068772671805906531926504608076873364350305209270451018067262259859127888001765331892417200300961812712325603214621331660765076001450863594776103534379738236658870133715578690949857568775875557131784069487732055666724445855133992765115288412396928360162698478744118634730099180360844704771293432119237110025781542718183199569488508645879265679098248655946358488214972092303788363550861837653893523709814138067903885873066690481846202862030691780511215778604009949709914266538084011931197598519516703202480368780797901657434196055060106352838369863978000483324409490078190289677374361557613306492213038472319846651456");
  BigInteger d8= new BigInteger("18358665634521591527969042760388605075012788388906233532766886370538827583052361841255217386405277720583349812884780474618518604011810959547757312767210443654754841227558404652939066493080212468423504398377742503859626042944402880609477442521532122181417370598722357798649468065412802539278858284523538668547105034565594741101568780764395882278460065638021843974356987553617708890842183584416175526156590977930773549129879160671690708474927080899421331281033017289892618054858398975440055857106061329660253741800736183177755648274214185812632170098375203493289941885286001895893166573132220560080251041723475385567105");

  //                          RSA 9

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN9= new BigInteger("20632762593756862711996522555853461710713115158583065353225806008836708042018069443247845531700008038156411039377912225173671651003683482702157260751196858817646569043581043710015215536487299976359174019557501632193637862294068515993340884464114677467503613841784720344344414399773642778632116929760022855001596692102491040231988839163005125607383724321089053780215617567616962319303166122022483571242813666710954997744103847449512753786060589446405128305467945164083063480622186484980734054049630459311003970976738037005142787797897547635923678252946860707769825503008011965172951254459443714397278311455465014245961");
  BigInteger bigE9 = new BigInteger(""+e);
  BigInteger bigPhi9 = new BigInteger("20632762593756862711996522555853461710713115158583065353225806008836708042018069443247845531700008038156411039377912225173671651003683482702157260751196858817646569043581043710015215536487299976359174019557501632193637862294068515993340884464114677467503613841784720344344414399773642778632116929760022855001309194337813523838307046860456491079460666743002568824397716884072869308689475625305192067703048972957008196786253610678287544934365134227205267968936289645132367726735804966839384924091145318818883949206519297150353134010152914709387061390130111425335200185152085364751515678415780468914006751757185880513924");
  BigInteger d9= new BigInteger("11623382134694956609654265724126978750317045511007320640876096828451886124041489904095556052769646104776457506047462034475364410257655891807126448676841906519180178053450907636507038125137115143005946332637486614593117015974136893822941932868686602867086278331914672247939267583802171161131845477314189599869513945633032871509380901934602646606553363995173029601549715540228730867705501321181434779431413828548342808266299697975836186566012493029409623470911512789695698864322228960369105869927599450246321854901882790649419987299614654486329406389117654360489122035427544618560903899279958113925036685763390187353313");


//                          RSA 10

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN10= new BigInteger("23998775250551939468867885392092091518726264360764250195088297634978732367325357720062193749564323641815663117913249155681871356580341835428342366171105871412249538028483323509713830393860865785555441340725023166270672295977265150471059150467998509089039719036632318622544879761463885169879389421815881987630384450550635705766186426409510319805722397520001296187906675588516885341218581236822478062161807612691048285908884557348508723684929530638222321141994960088899721711281845387254724573123451358351447126963675344909319108445739008762298774434730570020294124118004242296366151515272299370420059876133369107364391");
  BigInteger bigE10 = new BigInteger(""+e);
  BigInteger bigPhi10 = new BigInteger("25980192551261186582521935087788358200857779293003976683927741875252631356684956884225859413844453304042602856365677478687355751806906021751189940639102913895953511426747713545778189743107984477083007256639248291040046002635145825415950037880411188722234348030244566265421185631340972629647636941837224724320880759819237436031993741538525705314839651912451285229414015738488077055796071184992220524561601667737678942661457561372260249412280090668923837876013168521109481316317420987908385681888494431271712762126187417956653103177979612531063362761343164231704391986194498007967605710721857219945780184498848477203968");
  BigInteger d10= new BigInteger("3033856492528233188879113027350702324376262267557743150682920272606295644647917797743492610512236162357794359398679665758644798957354351076854547869563943187062078254512478985580345221983570701028836100338843964974785540567490757459949723997548982220771382153874891432134280312246948878228340347586013736782506982243422985357613523216986563897476100929907634947193538123251471248814849029428263203143868896683613045460442656386068907658907413106886904136328890273515538992277744433451641253042718201633389863876332195072705069207658295110114999012415166648961789171491400066729880088529752135406664489200332615471593");


//                          RSA 11

  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN11= new BigInteger("28822177373666709160339689753701085199500371507129034618039463947496876771061040068740398296091417592089715149214466639813621847764409351552574269421021506846503787820195809849372512977769481213392192703805705177256752807178874222946597936351916025175223410426468896030144308231684372981417060866083524169775420720918729468208430782094257467184228095321016112506706149865678693425215656851859334308244553316303600408752116833275360115472494087799381133681872343633491296272526346566289931902336231949465465157123362411942732336592718657941423639673134741441094372355278732726121531791585386928048871803027482214276171");
  BigInteger bigE11 = new BigInteger(""+e);
  BigInteger bigPhi11 = new BigInteger("28822177373666709160339689753701085199500371507129034618039463947496876771061040068740398296091417592089715149214466639813621847764409351552574269421021506846503787820195809849372512977769481213392192703805705177256752807178874222946597936351916025175223410426468896030144308231684372981417060866083524169775080767274927257053964359337930886089156312666673345968990363366258017930881969630581747133701615462183474706460057030201594737992396241202790268100788186481523259195892429267225422618828386045093020280489412827076745127224439190407104996381074873285148294812803442776102410349026631001553878280949602476055144");
  BigInteger d11 = new BigInteger("19018934078483764962510493661421138143912493190065188078363896087301065548336142008525676560000754462174219469046932638133876900505357993457781510526595603782350470849629796797930385831463432634303656952084799824460160396405962962075599651425530012431568604106124385884609010998175418373657051958659201462473002164602766439699036310541040314628555684538244892500037494150437069799333531572152192449212812034081305936426318359523599890736822983155406380125527349628148295881495399485640640044156009321544970856921207060435493229350566813072701873346292383998192214435730925832664370324458026523844530877793406910287025");


  //                             


  String[] loaddata; 
      String[] saveData;

    //String[] savedata = loadStrings("DO_NOT_EDIT.txt");

public void setup() {

  System.out.println("display Width: " + 1920 + "display height" + 1080);

  /*
     String s = "Hello World";
   goldby = new ArrayList<Byte>();
   currentlvlby = new ArrayList<Byte>();
   movementUPby = new ArrayList<Byte>();
   ultby = new ArrayList<Byte>();
   maxlifeby = new ArrayList<Byte>();
   bulletSby = new ArrayList<Byte>();
   reloadby = new ArrayList<Byte>();
   shieldby = new ArrayList<Byte>();
   bulletby = new ArrayList<Byte>();
   
   */
   loaddata = loadStrings("DO_NOT_EDIT.txt");

   saveData = loadStrings("DO_NOT_EDIT.txt");

  System.out.println(loaddata[0]);
  /*
  
  //                          RSA 1
  int p1=739;
  int q1=787;
  int n1=p1*q1;
  int phi1 = (q1-1)*(p1-1);
  int e=31;
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN1= new BigInteger(""+n1);
  BigInteger bigE1 = new BigInteger(""+e);
  BigInteger bigPhi1 = new BigInteger(""+phi1);
  BigInteger d1= bigE1.modInverse(bigPhi1);

  //                          RSA 2
  int p2=997;
  int q2=991;
  int n2=p2*q2;
  int phi2 = (q2-1)*(p2-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN2= new BigInteger(""+n2);
  BigInteger bigE2 = new BigInteger(""+e);
  BigInteger bigPhi2 = new BigInteger(""+phi2);
  BigInteger d2= bigE2.modInverse(bigPhi2);

  //                          RSA 3
  int p3=739;
  int q3=991;
  int n3=p3*q3;
  int phi3 = (q3-1)*(p3-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN3= new BigInteger(""+n3);
  BigInteger bigE3 = new BigInteger(""+e);
  BigInteger bigPhi3 = new BigInteger(""+phi3);
  BigInteger d3= bigE3.modInverse(bigPhi3);

  //                          RSA 4
  int p4=991;
  int q4=787;
  int n4=p4*q4;
  int phi4 = (q4-1)*(p4-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN4= new BigInteger(""+n4);
  BigInteger bigE4 = new BigInteger(""+e);
  BigInteger bigPhi4 = new BigInteger(""+phi4);
  BigInteger d4= bigE4.modInverse(bigPhi4);

  //                          RSA 5
  int p5=191;
  int q5=461;
  int n5=p5*q5;
  int phi5 = (q5-1)*(p5-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN5= new BigInteger(""+n5);
  BigInteger bigE5 = new BigInteger(""+e);
  BigInteger bigPhi5 = new BigInteger(""+phi5);
  BigInteger d5= bigE5.modInverse(bigPhi5);

  //                          RSA 6
  int p6=827;
  int q6=911;
  int n6=p6*q6;
  int phi6 = (q6-1)*(p6-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN6= new BigInteger(""+n6);
  BigInteger bigE6 = new BigInteger(""+e);
  BigInteger bigPhi6 = new BigInteger(""+phi6);
  BigInteger d6= bigE6.modInverse(bigPhi6);

  //                          RSA 7
  int p7=911;
  int q7=647;
  int n7=p7*q7;
  int phi7 = (q7-1)*(p7-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN7= new BigInteger(""+n7);
  BigInteger bigE7 = new BigInteger(""+e);
  BigInteger bigPhi7 = new BigInteger(""+phi7);
  BigInteger d7= bigE7.modInverse(bigPhi7);

  //                          RSA 8
  int p8=499;
  int q8=953;
  int n8=p8*q8;
  int phi8 = (q8-1)*(p8-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN8= new BigInteger(""+n8);
  BigInteger bigE8 = new BigInteger(""+e);
  BigInteger bigPhi8 = new BigInteger(""+phi8);
  BigInteger d8= bigE8.modInverse(bigPhi8);

  //                          RSA 9
  int p9=809;
  int q9=863;
  int n9=p9*q9;
  int phi9 = (q9-1)*(p9-1);
  //System.out.println(n);
  // System.out.println(phi);
  BigInteger bigN9= new BigInteger(""+n9);
  BigInteger bigE9 = new BigInteger(""+e);
  BigInteger bigPhi9 = new BigInteger(""+phi9);
  BigInteger d9= bigE9.modInverse(bigPhi9);

*/
  



  BigInteger decryptedGold  =  new BigInteger(loaddata[0]).modPow(d1, bigN1);      // gold decryption   

  byte[] goldbytes = hexStringToByteArray("0x"+decryptedGold.toString());
String goldString = new String(goldbytes, StandardCharsets.UTF_8); 
gold= Integer.parseInt(goldString.substring(1,goldString.length()));

 BigInteger decryptedlvl  =  new BigInteger(loaddata[1]).modPow(d2, bigN2);      // lvl decryption   

  byte[] lvlbytes = hexStringToByteArray("0x"+decryptedlvl.toString());
String lvlString = new String(lvlbytes, StandardCharsets.UTF_8); 
currentLVL= Integer.parseInt(lvlString.substring(1,lvlString.length()));
// currentLVL = 10; // deleeeeeeeeeeeeeete delete


 BigInteger decryptedmvmu  =  new BigInteger(loaddata[2]).modPow(d3, bigN3);      // mvmu decryption   

  byte[] mvmubytes = hexStringToByteArray("0x"+decryptedmvmu.toString());
String mvmuString = new String(mvmubytes, StandardCharsets.UTF_8); 
movementUP = Integer.parseInt(mvmuString.substring(1,mvmuString.length()));




   BigInteger decryptedult  =  new BigInteger(loaddata[3]).modPow(d4, bigN4);      // ult decryption   
System.out.println(decryptedult.toString());
  byte[] ultbytes = hexStringToByteArray("0x"+decryptedult.toString());
String ultString = new String(ultbytes, StandardCharsets.UTF_8); 
ult= Integer.parseInt(ultString.substring(1,ultString.length()));


   BigInteger decryptedlief  =  new BigInteger(loaddata[4]).modPow(d5, bigN5);      // life decryption   

  byte[] liefbytes = hexStringToByteArray("0x"+decryptedlief.toString());
String liefString = new String(liefbytes, StandardCharsets.UTF_8); 
maxlife = Integer.parseInt(liefString.substring(1,liefString.length()));


 BigInteger decryptedbbs  =  new BigInteger(loaddata[5]).modPow(d6, bigN6);      // bulletS decryption   

  byte[] bbsbytes = hexStringToByteArray("0x"+decryptedbbs.toString());
String bbsString = new String(bbsbytes, StandardCharsets.UTF_8); 
bulletS= Integer.parseInt(bbsString.substring(1,bbsString.length()));
  
  
 BigInteger decryptedrelod  =  new BigInteger(loaddata[6]).modPow(d7, bigN7);      // relod decryption   

  byte[] relodbytes = hexStringToByteArray("0x"+decryptedrelod.toString());
String relodString = new String(relodbytes, StandardCharsets.UTF_8); 
reload= Integer.parseInt(relodString.substring(1,relodString.length()));



   BigInteger decryptedshild  =  new BigInteger(loaddata[7]).modPow(d8, bigN8);      // shield decryption   

  byte[] shildbytes = hexStringToByteArray("0x"+decryptedshild.toString());
String shildString = new String(shildbytes, StandardCharsets.UTF_8); 
shield= Integer.parseInt(shildString.substring(1,shildString.length()));


 BigInteger decryptedbbd  =  new BigInteger(loaddata[8]).modPow(d9, bigN9);      // bulletD decryption   

  byte[] bbdbytes = hexStringToByteArray("0x"+decryptedbbd.toString());
String bbdString = new String(bbdbytes, StandardCharsets.UTF_8); 
bulletD= Integer.parseInt(bbdString.substring(1,bbdString.length()));

  BigInteger decryptednewgame  =  new BigInteger(loaddata[9]).modPow(d10, bigN10);      // newgame decryption   

  byte[] newgamebytes = hexStringToByteArray("0x"+decryptednewgame.toString());
String newgameString = new String(newgamebytes, StandardCharsets.UTF_8); 
newgame= Integer.parseInt(newgameString.substring(1,newgameString.length()));

 BigInteger decryptednewgameplus  =  new BigInteger(loaddata[10]).modPow(d11, bigN11);      // bulletD decryption   

  byte[] newgameplusbytes = hexStringToByteArray("0x"+decryptednewgameplus.toString());
String newgameplusString = new String(newgameplusbytes, StandardCharsets.UTF_8); 
newGamePlus= Integer.parseInt(newgameplusString.substring(1,newgameplusString.length()));

  
  
  ellipseMode(RADIUS);

    

  player = new Characters(); 

  //bill = new Bullet(1920/2,1080/2,0,0);
  frameRate(60);
  /*
 f = new Nongamer(1,3);
   f2 = new Nongamer(2,10);
   enemyOne.add(f);
   enemyTwo.add(f2); */
  textAlign(CENTER);
  /*
sounds = new ArrayList<SoundFile>();
   sounds.add(new SoundFile(this,"menu.mp3")); // 0
   sounds.add(new SoundFile(this,"shop.mp3")); // 1
   sounds.add(new SoundFile(this,"victory.mp3")); // 2
   sounds.add(new SoundFile(this,"defeat.mp3")); // 3
   sounds.add(new SoundFile(this,"1.mp3")); // 4
   sounds.add(new SoundFile(this,"2.mp3")); // 5
   
   */

  minim = new Minim(this);
  sounds = new ArrayList<AudioPlayer>();

  sounds.add((minim.loadFile("menu.mp3"))); // 0
  sounds.add((minim.loadFile("shop.mp3"))); // 1
  sounds.add((minim.loadFile("victory.mp3"))); // 2
  sounds.add((minim.loadFile("defeat.mp3"))); // 3
  sounds.add((minim.loadFile("1.mp3"))); // 4
  sounds.add((minim.loadFile("2.mp3"))); // 5
  sounds.add((minim.loadFile("3.mp3"))); // 6
  sounds.add((minim.loadFile("4.mp3"))); // 7
  sounds.add((minim.loadFile("5.mp3"))); // 8
  sounds.add((minim.loadFile("6.mp3"))); // 9
  sounds.add((minim.loadFile("7.mp3"))); // 10
  sounds.add((minim.loadFile("8.mp3"))); // 11
  sounds.add((minim.loadFile("9.mp3"))); // 12
  sounds.add((minim.loadFile("10.mp3"))); // 13


  menu = minim.loadFile("menu.mp3");
  // minim.stop();
}//                                    end of setup

 public static byte[] hexStringToByteArray(String hex) {
    int l = hex.length();
    byte[] data = new byte[l/2];
    for (int i = 0; i < l; i += 2) {
        data[i/2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                             + Character.digit(hex.charAt(i+1), 16));
    }
    return data;
}





public void draw() {                               //////////////// start of display
float urdisplayH = displayHeight;
float urdisplayW = displayWidth;
float scaleH= urdisplayH/1080;
float scaleW = urdisplayW/1920;
scale(scaleW,scaleH);
  
  if (levelSelect) {

    
    
    
    
    
    if (shop) {              /// start of shopchar

      selected=0;
      if (b1==false&&b2==false&&b3==false&&b4==false&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==UP&&konami<=0) {

        b1=true;
        konami=15;
      }

      if (b1==true&&b2==false&&b3==false&&b4==false&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==UP&&konami<=0) {

        b2=true;
        konami=15;
      }
      if (b1==true&&b2==false&&b3==false&&b4==false&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode!=UP&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;     
        konami=15;
      }
      if (b1==true&&b2==true&&b3==false&&b4==false&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==DOWN&&konami<=0) {

        b3=true;
        konami=15;
      }
      if (b1==true&&b2==true&&b3==false&&b4==false&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode!=DOWN&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false; 
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==false&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==DOWN&&konami<=0) {

        b4=true;
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==false&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode!=DOWN&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;  
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==LEFT&&konami<=0) {
        b5=true;
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==false&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode!=LEFT&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;    
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==RIGHT&&konami<=0) {

        b6=true;
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==false&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode!=RIGHT&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;     
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==LEFT&&konami<=0) {  ///////////////                        error?

        b7=true;
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==false&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode!=LEFT&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false; 
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==true&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode==RIGHT&&konami<=0) {  

        b8=true;
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==true&&b8==false&&b9==false&&b10==false&&keyPressed&&keyCode!=RIGHT&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;  
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==true&&b8==true&&b9==false&&b10==false&&keyPressed&&key=='b'&&konami<=0) {  
        b9=true;
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==true&&b8==true&&b9==false&&b10==false&&keyPressed&&key!='b'&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false; 
        konami=15;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==true&&b8==true&&b9==true&&b10==false&&keyPressed&&key=='a'&&konami<=0) {  

        b10=true;

        gold+=1000000; 
        
         str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings(dataPath("DO_NOT_EDIT.txt"), saveData );

        
        
        konami=15;
        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;
      }
      if (b1==true&&b2==true&&b3==true&&b4==true&&b5==true&&b6==true&&b7==true&&b8==true&&b9==true&&b10==false&&keyPressed&&key!='a'&&konami<=0) {

        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;   
        konami=15;
      }



      fill(0xff000000);
      rectMode(CORNER);
      rect(0, 0, 1920, 1080);
      fill(0xffffffff);
      textSize(100);
      //    text("Click the name to buy!",1920/2,100);
      fill(0xff20fc03);

      textAlign(CENTER);


      text("$" +Integer.toString(gold), 1920/2, 100);

      /*
           textSize(64);
       text(""+b1, 1920/2+800, 75*1);
       text(""+b2, 1920/2+800, 75*2);
       text(""+b3, 1920/2+800, 75*3);
       text(""+b4, 1920/2+800, 75*4);
       text(""+b5, 1920/2+800, 75*5);
       text(""+b6, 1920/2+800, 75*6);
       text(""+b7, 1920/2+800, 75*7);
       text(""+b8, 1920/2+800, 75*8);
       text(""+b9, 1920/2+800, 75*9);
       text(""+b10, 1920/2+800, 75*10);
       */

      fill(0xffffffff);
      textAlign(CENTER);

      //    text("Click to buy!",1920/2,100);
      //   text("dx: " + Math.abs(mouseX/scaleW-1920*.20*1) + "dy " + Math.abs(mouseY/scaleH-(1080*.333*1)+75-100-16+125-50+10-1.5),1920/2,500);
      textSize(50);

      if (movementUP<4) {
        fill(0xfffd6a02);
        rectMode(CENTER);
        rect(1920*.20f*1, (1080*.333f*1)+75-100-16, 325, 225);
        fill(0xffffffff);
      } else {
        fill(0xff621a78);
        rectMode(CENTER);
        rect(1920*.20f*1, (1080*.333f*1)+75-100-16, 325, 225);
        fill(0xffffffff);
      }
      text("Mvmt Speed", 1920*.20f*1, 1080*.333f*1-100);
      fill(0xffffffff);

      text("Level: " + (int)movementUP, 1920*.20f*1, (1080*.333f*1)+75-100);


      if (movementUP<4) text("Cost: " + (int)(movementUP*movementUpC), 1920*.20f*1, (1080*.333f*1)+75*2-100);
      else text("MAX LEVEL", 1920*.20f*1, (1080*.333f*1)+75*2-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.20f*1)<325/2&&Math.abs(mouseY/scaleH-(1080*.333f*1)+75-100-16+125-50+10-1.5f)<=225/2) {
        if (movementUP<4&&shopFRAME<=0) {
          if (gold>=(int)(movementUP*movementUpC)) {
            gold-=(int)(movementUP*movementUpC);
 
// GOLD
  str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


            movementUP++;
             
// movementUP
  str3 =""+(int)movementUP;        //bookmark
          sb3 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch3 = str3.toCharArray();
      for(int i = 0; i < ch3.length; i++) {
         String hexString = Integer.toHexString(ch3[i]);
         sb3.append(hexString);
      }
      
       result3 = sb3.toString();

      System.out.println("hexstring3: "+result3);
   //   BigInteger hex = new BigInteger(result3);
      
       encrypted= (new BigInteger(result3)).modPow(bigE3,bigN3); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[2] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );

            shopFRAME=30;
          } else {
            movementUpB=true;
          }
        }
      }
      //    text("dx: " + Math.abs(mouseX/scaleW-1920*.20*4) + "dy " + Math.abs(mouseY/scaleH-(1080*.333*1-100-20+2)),1920/2,500);

      if (reload<4) {
        fill(0xfffd6a02);

        rect(1920*.20f*4, (1080*.333f*1)+75-100-16, 325, 225);
      } else {
        fill(0xff621a78);

        rect(1920*.20f*4, (1080*.333f*1)+75-100-16, 325, 225);
      }



      fill(0xffffffff);

      text("Reload Time", 1920*.20f*4, 1080*.333f*1-100);
      fill(0xffffffff);

      text("Level: " + (int)reload, 1920*.20f*4, (1080*.333f*1)+75-100);

      if (reload<4) text("Cost: " + (int)(reload*reloadC), 1920*.20f*4, (1080*.333f*1)+75*2-100);
      else text("MAX LEVEL", 1920*.20f*4, (1080*.333f*1)+75*2-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.20f*4)<325/2&&Math.abs(mouseY/scaleH-(1080*.333f*1)+75-100-16+125-50+10-1.5f)<=225/2) {
        if (reload<4&&shopFRAME<=0) {
          if (gold>=(int)(reload*reloadC)) {
            gold-=(int)(reload*reloadC);
 
// GOLD
  str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


            reload++;
            shopFRAME=20;
            
                       
// life
  str7 =""+ (int) reload;        //bookmark
          sb7 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch7 = str7.toCharArray();
      for(int i = 0; i < ch7.length; i++) {
         String hexString = Integer.toHexString(ch7[i]);
         sb7.append(hexString);
      }
       result7 = sb7.toString();
      System.out.println("hexstring: "+result7);
   //   BigInteger hex = new BigInteger(result7);
      
      encrypted= (new BigInteger(result7)).modPow(bigE7,bigN7); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[6] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );




            
          } else {

            reloadCB=true;
          }
        }
      }


      if (bulletS<4) {

        fill(0xfffd6a02);

        rect(1920*.20f*2, (1080*.333f*1)+75-100-16, 325, 225);
      } else {

        fill(0xff621a78);

        rect(1920*.20f*2, (1080*.333f*1)+75-100-16, 325, 225);
      }

      fill(0xffffffff);

      text("Bullet Speed", 1920*.20f*2, 1080*.333f*1-100);
      fill(0xffffffff);

      text("Level: " + (int)bulletS, 1920*.20f*2, (1080*.333f*1)+75-100);
      if (bulletS<4) text("Cost: " + (int)(bulletS*bulletSC), 1920*.20f*2, (1080*.333f*1)+75*2-100);
      else text("MAX LEVEL", 1920*.20f*2, (1080*.333f*1)+75*2-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.20f*2)<325/2&&Math.abs(mouseY/scaleH-(1080*.333f*1)+75-100-16+125-50+10-1.5f)<=225/2) {
        if (bulletS<4&&shopFRAME<=0) {
          if (gold>=(int)(bulletS*bulletSC)) {
            gold-=(int)(bulletS*bulletSC);
 
// GOLD
  str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


            bulletS++;
            shopFRAME=20;
                   
// life
  str6 =""+ (int) bulletS;        //bookmark
          sb6 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch6 = str6.toCharArray();
      for(int i = 0; i < ch6.length; i++) {
         String hexString = Integer.toHexString(ch6[i]);
         sb6.append(hexString);
      }
       result6 = sb6.toString();
      System.out.println("hexstring: "+result6);
   //   BigInteger hex = new BigInteger(result6);
      
      encrypted= (new BigInteger(result6)).modPow(bigE6,bigN6); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[5] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );



  
        } else {
            bulletSB=true;
          }
        }
      }

      fill(0xfffd6a02);

      rect(1920*.20f*3, (1080*.333f*1)+75-100-16, 325, 225);
      fill(0xffffffff);

      text("Max HP", 1920*.20f*3, 1080*.333f*1-100);
      fill(0xffffffff);

      text("Level: " + (int)(maxlife-4), 1920*.20f*3, (1080*.333f*1)+75-100);
      text("Cost: " + (int)((maxlife-4)*maxLifeC), 1920*.20f*3, (1080*.333f*1)+75*2-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.20f*3)<325/2&&Math.abs(mouseY/scaleH-(1080*.333f*1)+75-100-16+125-50+10-1.5f)<=225/2) {

        if (gold>=(int)((maxlife-4)*maxLifeC)&&shopFRAME<=0) {
          gold-=(int)((maxlife-4)*maxLifeC);

 
// GOLD
  str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );




          maxlife++;
                     
// life
  str5 =""+ (int) maxlife;        //bookmark
          sb5 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch5 = str5.toCharArray();
      for(int i = 0; i < ch5.length; i++) {
         String hexString = Integer.toHexString(ch5[i]);
         sb5.append(hexString);
      }
       result5 = sb5.toString();
      System.out.println("hexstring: "+result5);
   //   BigInteger hex = new BigInteger(result5);
      
      encrypted= (new BigInteger(result5)).modPow(bigE5,bigN5); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[4] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );



          shopFRAME=20;
        }
      }

      //    text("dx: " + Math.abs(mouseX/scaleW-1920*.25*3) + "dy " + Math.abs(mouseY/scaleH-(1080*.333*2-100-20+2)+2.5),1920/2,500);



      fill(0xfffd6a02);

      rect(1920*.25f*1, (1080*.333f*2)+75-100-16, 325, 225);

      fill(0xffffffff);

      text("Death Ray", 1920*.25f*1, 1080*.333f*2-100);
      fill(0xffffffff);

      text("Level: " + (int)ult, 1920*.25f*1, (1080*.333f*2)+75-100);
      text("Cost: " + (int)(ult*ultC), 1920*.25f*1, (1080*.333f*2)+75*2-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.25f*1)<325/2&&Math.abs(mouseY/scaleH-(1080*.333f*2)+75-100-16+125-50+10-1.5f)<=225/2) {
        if (gold>=(int)(ult*ultC)&&shopFRAME<=0) {
          gold-=(int)(ult*ultC);
 
// GOLD
  str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


          ult++;
           
// ult
  str4 =""+ (int) ult;        //bookmark
          sb4 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch4 = str4.toCharArray();
      for(int i = 0; i < ch4.length; i++) {
         String hexString = Integer.toHexString(ch4[i]);
         sb4.append(hexString);
      }
       result4 = sb4.toString();
      System.out.println("hexstring: "+result4);
   //   BigInteger hex = new BigInteger(result4);
      
      encrypted= (new BigInteger(result4)).modPow(bigE4,bigN4); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[3] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


          shopFRAME=20;
        }
      }


      if (bulletD<4) {

        fill(0xfffd6a02);

        rect(1920*.25f*2, (1080*.333f*2)+75-100-16, 325, 225);
      } else {
        fill(0xff621a78);

        rect(1920*.25f*2, (1080*.333f*2)+75-100-16, 325, 225);
      }
      fill(0xffffffff);

      text("Bullet Dmg", 1920*.25f*2, 1080*.333f*2-100);
      fill(0xffffffff);

      text("Level: " + (int)bulletD, 1920*.25f*2, (1080*.333f*2)+75-100);
      if (bulletD<4)  text("Cost: " + (int)((bulletD*bulletDC)), 1920*.25f*2, (1080*.333f*2)+75*2-100);
      else text("MAX LEVEL", 1920*.25f*2, (1080*.333f*2)+75*2-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.25f*2)<325/2&&Math.abs(mouseY/scaleH-(1080*.333f*2)+75-100-16+125-50+10-1.5f)<=225/2) {
        if (bulletD<4&&shopFRAME<=0) {
          if (gold>=(int)((bulletD*bulletDC))) {
            gold-=(int)((bulletD*bulletDC));
 
// GOLD
  str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


            bulletD++;
            shopFRAME=20;
            
                       
//  bulletD
  str9 =""+ (int) bulletD;        //bookmark
          sb9 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch9 = str9.toCharArray();
      for(int i = 0; i < ch9.length; i++) {
         String hexString = Integer.toHexString(ch9[i]);
         sb9.append(hexString);
      }
       result9 = sb9.toString();
      System.out.println("hexstring: "+result9);
   //   BigInteger hex = new BigInteger(result9);
      
      encrypted= (new BigInteger(result9)).modPow(bigE9,bigN9); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[8] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );






            
            
          }
        }
      }

      fill(0xfffd6a02);

      rect(1920*.25f*3, (1080*.333f*2)+75-100-16, 325, 225);

      fill(0xffffffff);
      fill(0xffffffff);


      text("The Big K", 1920*.25f*3, 1080*.333f*2-100);
      fill(0xffffffff);

      text("Level: " + (int)shield, 1920*.25f*3, (1080*.333f*2)+75-100);
      text("Cost: " + (int)(shield*shieldC), 1920*.25f*3, (1080*.333f*2)+75*2-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.25f*3)<325/2&&Math.abs(mouseY/scaleH-(1080*.333f*2)+75-100-16+125-50+10-1.5f)<=225/2) {
        if (shopFRAME<=0) {
          if (gold>=(int)(shield*shieldC)) {
            gold-=(int)(shield*shieldC);

 
// GOLD
  str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );



            shield++;
            shopFRAME=20;
                 
// life
  str8 =""+ (int) shield;        //bookmark
          sb8 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch8 = str8.toCharArray();
      for(int i = 0; i < ch8.length; i++) {
         String hexString = Integer.toHexString(ch8[i]);
         sb8.append(hexString);
      }
       result8 = sb8.toString();
      System.out.println("hexstring: "+result8);
   //   BigInteger hex = new BigInteger(result8);
      
      encrypted= (new BigInteger(result8)).modPow(bigE8,bigN8); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[7] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );




    
        
      }
        }
      }
      textSize(100);

      text("Back", 1920/2, 1080-100);
      if (mousePressed&&Math.abs(mouseX/scaleW-1920/2)<105&&Math.abs(mouseY/scaleH-(1080-100-35-3))<=41) {
        playing=false;
        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false;
        shop=false;
      }

      shopFRAME--;
      konami--;
    } /////////////////////                                      end of shop


 else if(newgame==1&&newgamescreen) { // bookmark bkmrk
   
   
   
         fill(0xff000000);
      rectMode(CORNER);
      rect(0, 0, 1920, 1080);
   textSize(75);
   fill(0xffffffff);
   text("Are you sure you want to start a new game?",1920/2,250);
      textSize(60);
   text("You will keep all your money and upgrades but will go back",1920/2,350);
   text("to level 1 and the entire game will be much harder",1920/2,425);
   
   textSize(100);
      rectMode(CENTER);

      fill(0xffff0000);
   rect(1920/2-200,664,200,117);
   rect(1920/2+200,664,200,117);
   fill(0xffffffff);
   text("No",1920/2-200,700);
   text("Yes",1920/2+200,700);
   
   if(mousePressed&&Math.abs(mouseX/scaleW-(1920/2-200))<=100&&Math.abs(mouseY/scaleH-700+45)<=67) {
    // fill(#ff0000);
  //   text("No",1920/2-200,700);
       newgamescreen=false;
       selected=0;
   }
   
   if(mousePressed&&Math.abs(mouseX/scaleW-(1920/2+200))<=100&&Math.abs(mouseY/scaleH-700+45)<=67) {
  //  fill(#ff0000);
  //  text("Yes",1920/2+200,700);
     
     currentLVL=1;
   newGamePlus++;
     newgame=0;
     selected=0;
         newgamescreen=false;
      
// GOLD
  str2 =""+currentLVL;        //bookmark
          sb2 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch2 = str2.toCharArray();
      for(int i = 0; i < ch2.length; i++) {
         String hexString = Integer.toHexString(ch2[i]);
         sb2.append(hexString);
      }
       result2 = sb2.toString();
      System.out.println("hexstring: "+result2);
   //   BigInteger hex = new BigInteger(result2);
      
      BigInteger encrypted= (new BigInteger(result2)).modPow(bigE2,bigN2); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[1] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


        
// GOLD
  str11 =""+newGamePlus;        //bookmark
          sb11 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch11 = str11.toCharArray();
      for(int i = 0; i < ch11.length; i++) {
         String hexString = Integer.toHexString(ch11[i]);
         sb11.append(hexString);
      }
       result11 = sb11.toString();
      System.out.println("hexstring: "+result11);
   //   BigInteger hex = new BigInteger(result11);
      
       encrypted= (new BigInteger(result11)).modPow(bigE11,bigN11); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[10] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );

// GOLD
  str10 =""+newgame;        //bookmark
          sb10 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch10 = str10.toCharArray();
      for(int i = 0; i < ch10.length; i++) {
         String hexString = Integer.toHexString(ch10[i]);
         sb10.append(hexString);
      }
       result10 = sb10.toString();
      System.out.println("hexstring: "+result10);
   //   BigInteger hex = new BigInteger(result10);
      
       encrypted= (new BigInteger(result10)).modPow(bigE10,bigN10); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[9] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );




   }

   
   
     }



    else  { // start of menu i think i dont even know anymore theres so much code whats even happening anymore
      //  menu.play();

      /////// start of i
/*      
     System.out.println((int)random(2));
          System.out.println((int)random(2));
     System.out.println((int)random(2));
     System.out.println((int)random(2));
     System.out.println((int)random(2));
     System.out.println((int)random(2));
     System.out.println((int)random(2));
     System.out.println((int)random(2));
     System.out.println((int)random(2));
     System.out.println((int)random(2));
*/

      fill(0xff000000);
      rectMode(CORNER);
      rect(0, 0, 1920, 1080);
      fill(0xffFFFFFF);
      textSize(50);

      fill(0xff176082);
      rectMode(CENTER);

      if (currentLVL>=1) {
        fill(0xff2d8dd6);
        rect(1920*.333f*1-333, -15+(1080*.1667f*1)-2, 200, 70);
        fill(0xffffffff);

        text("LEVEL 1", 1920*.333f*1-333, 1080*.1667f*1);
      }
      if (currentLVL>=2) {

        fill(0xff2d8dd6);
        rect(1920*.333f*1-333, -15+(1080*.1667f*2)-2, 200, 70);
        fill(0xffffffff);

        text("LEVEL 2", 1920*.333f*1-333, 1080*.1667f*2);
      } else {
        fill(0xff333333);
        rect(1920*.333f*1-333, -15+(1080*.1667f*2)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 2", 1920*.333f*1-333, 1080*.1667f*2);
      }
      if (currentLVL>=3) {

        fill(0xff2d8dd6);

        rect(1920*.333f*1-333, -15+(1080*.1667f*3)-2, 200, 70);
        fill(0xffFFFFFF);

        text("LEVEL 3", 1920*.333f*1-333, 1080*.1667f*3);
      } else {
        fill(0xff333333);
        rect(1920*.333f*1-333, -15+(1080*.1667f*3)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 3", 1920*.333f*1-333, 1080*.1667f*3);
      }

      if (currentLVL>=4) {

        fill(0xff2d8dd6);

        rect(1920*.333f*1-333, -15+(1080*.1667f*4)-2, 200, 70);
        fill(0xffFFFFFF);

        text("LEVEL 4", 1920*.333f*1-333, 1080*.1667f*4);
      } else {
        fill(0xff333333);
        rect(1920*.333f*1-333, -15+(1080*.1667f*4)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 4", 1920*.333f*1-333, 1080*.1667f*4);
      }

      if (currentLVL>=5) {

        fill(0xff2d8dd6);

        rect(1920*.333f*1-333, -15+(1080*.1667f*5)-2, 200, 70);
        fill(0xffFFFFFF);

        text("LEVEL 5", 1920*.333f*1-333, 1080*.1667f*5);
      } else {
        fill(0xff333333);
        rect(1920*.333f*1-333, -15+(1080*.1667f*5)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 5", 1920*.333f*1-333, 1080*.1667f*5);
      }

      if (currentLVL>=6) {

        fill(0xff2d8dd6);

        rect(1920*.333f*2-333, -15+(1080*.1667f*1)-2, 200, 70);
        fill(0xffFFFFFF);

        text("LEVEL 6", 1920*.333f*2-333, 1080*.1667f*1);
      } else {
        fill(0xff333333);
        rect(1920*.333f*2-333, -15+(1080*.1667f*1)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 6", 1920*.333f*2-333, 1080*.1667f*1);
      }

      if (currentLVL>=7) {

        fill(0xff2d8dd6);

        rect(1920*.333f*2-333, -15+(1080*.1667f*2)-2, 200, 70);
        fill(0xffFFFFFF);

        text("LEVEL 7", 1920*.333f*2-333, 1080*.1667f*2);
      } else {
        fill(0xff333333);
        rect(1920*.333f*2-333, -15+(1080*.1667f*2)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 7", 1920*.333f*2-333, 1080*.1667f*2);
      }

      if (currentLVL>=8) {

        fill(0xff2d8dd6);

        rect(1920*.333f*2-333, -15+(1080*.1667f*3)-2, 200, 70);
        fill(0xffFFFFFF);

        text("LEVEL 8", 1920*.333f*2-333, 1080*.1667f*3);
      } else {
        fill(0xff333333);
        rect(1920*.333f*2-333, -15+(1080*.1667f*3)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 8", 1920*.333f*2-333, 1080*.1667f*3);
      }

      if (currentLVL>=9) {

        fill(0xff2d8dd6);

        rect(1920*.333f*2-333, -15+(1080*.1667f*4)-2, 200, 70);
        fill(0xffFFFFFF);

        text("LEVEL 9", 1920*.333f*2-333, 1080*.1667f*4);
      } else {
        fill(0xff333333);
        rect(1920*.333f*2-333, -15+(1080*.1667f*4)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 9", 1920*.333f*2-333, 1080*.1667f*4);
      }


      if (currentLVL>=10) {

        fill(0xff2d8dd6);

        rect(1920*.333f*2-333, -15+(1080*.1667f*5)-2, 200, 70);
        fill(0xffFFFFFF);
        textSize(45);

        text("LEVEL 10", 1920*.333f*2-333, 1080*.1667f*5);
      } else {
        fill(0xff333333);
        rect(1920*.333f*2-333, -15+(1080*.1667f*5)-2, 200, 70);
        fill(0xff000000);
        textSize(45);

        text("LEVEL 10", 1920*.333f*2-333, 1080*.1667f*5);
      }

      fill(0xffFFFFFF);



      fill(0xffffffff);

      fill(0xffFFFFFF);

      //   text("LEVEL SELECTED: ",1920*.25*3,1080*.25*1);
      //   text("mouseX/scaleW: "+mouseX/scaleW+" mouseY/scaleH"+ mouseY/scaleH,1920*.25*3,1080*.25*2);
      //   text("mouseX/scaleW: "+Math.abs(mouseX/scaleW-307)+" mouseY/scaleH"+ Math.abs(mouseY/scaleH-165),1920*.25*3,1080*.25*3);


      textSize(100);

      text("Shop", 1920*.25f*3, 1080*.25f*2);

      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.25f*3)<135&&Math.abs(40+mouseY/scaleH-1080*.25f*2)<43) {
        selected=0;

        shop=true;
        song=false;
        playing=false;
        onex=-1;
        //one.stop();
        b1=false;
        b2=false;
        b3=false;
        b4=false;
        b5=false;
        b6=false;
        b7=false;
        b8=false;
        b9=false;
        b10=false; 
        movementUpB=false;

        maxLifeB=false;
        ultB=false;
        bulletSB=false;
        reloadCB=false;
        shieldB=false;
        bulletDB=false;
        // onex=0;
      }


      text("Quit", 1920*.25f*3, 1080*.25f*3);
      //         if(Math.abs(mouseX/scaleW-1920*.25*3)<135&&Math.abs(40+mouseY/scaleH-1080*.25*1)<43) {


      if (mousePressed&&Math.abs(mouseX/scaleW-1920*.25f*3)<135&&Math.abs(40+mouseY/scaleH-1080*.25f*3)<43) exit();


// come here pls
       
       
             textSize(50);

       
       if (currentLVL==1) {
        fill(0xff8c0b10);
        rect(1920*.333f*1-333, -15+(1080*.1667f*1)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 1", 1920*.333f*1-333, 1080*.1667f*1);
      }
       if (currentLVL==2) {
        fill(0xff8c0b10);
        rect(1920*.333f*1-333, -15+(1080*.1667f*2)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 2", 1920*.333f*1-333, 1080*.1667f*2);
      }
       if (currentLVL==3) {
        fill(0xff8c0b10);
        rect(1920*.333f*1-333, -15+(1080*.1667f*3)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 3", 1920*.333f*1-333, 1080*.1667f*3);
      }
        if (currentLVL==4) {
        fill(0xff8c0b10);
        rect(1920*.333f*1-333, -15+(1080*.1667f*4)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 4", 1920*.333f*1-333, 1080*.1667f*4);
      }
       if (currentLVL==5) {
        fill(0xff8c0b10);
        rect(1920*.333f*1-333, -15+(1080*.1667f*5)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 5", 1920*.333f*1-333, 1080*.1667f*5);
      }
       if (currentLVL==6) {
        fill(0xff8c0b10);
        rect(1920*.333f*2-333, -15+(1080*.1667f*1)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 6", 1920*.333f*2-333, 1080*.1667f*1);
      }
       if (currentLVL==7) {
        fill(0xff8c0b10);
        rect(1920*.333f*2-333, -15+(1080*.1667f*2)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 7", 1920*.333f*2-333, 1080*.1667f*2);
      }
       if (currentLVL==8) {
        fill(0xff8c0b10);
        rect(1920*.333f*2-333, -15+(1080*.1667f*3)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 8", 1920*.333f*2-333, 1080*.1667f*3);
      }
       if (currentLVL==9) {
        fill(0xff8c0b10);
        rect(1920*.333f*2-333, -15+(1080*.1667f*4)-2, 200, 70);
        fill(0xff000000);

        text("LEVEL 9", 1920*.333f*2-333, 1080*.1667f*4);
       }
       if (currentLVL==10) {
        fill(0xff8c0b10);
        rect(1920*.333f*2-333, -15+(1080*.1667f*5)-2, 200, 70);
        fill(0xff000000);
        textSize(45);

        text("LEVEL 10", 1920*.333f*2-333, 1080*.1667f*5);
      }






      if (mousePressed) {
        if (Math.abs(mouseX/scaleW-307-0*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165+0*1080*.1667f)<=35) {
          life = maxlife;
          selected=1;
        }
        if (Math.abs(mouseX/scaleW-307-0*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-1*1080*.1667f)<=35&&currentLVL>=2) {
          life = maxlife;
          selected=2;
        }
        if (Math.abs(mouseX/scaleW-307-0*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-2*1080*.1667f)<=35&&currentLVL>=3) {
          life = maxlife;           
          selected=3;
        }
        if (Math.abs(mouseX/scaleW-307-0*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-3*1080*.1667f)<=35&&currentLVL>=4) {
          life = maxlife;           
          selected=4;
        }
        if (Math.abs(mouseX/scaleW-307-0*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-4*1080*.1667f)<=35&&currentLVL>=5) {
          life = maxlife;           
          selected=5;
        }
        if (Math.abs(mouseX/scaleW-307-1*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165+0*1080*.1667f)<=35&&currentLVL>=6) {
          life = maxlife;           
          selected=6;
        }
        if (Math.abs(mouseX/scaleW-307-1*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-1*1080*.1667f)<=35&&currentLVL>=7) { 
          life = maxlife;           
          selected=7;
        }
        if (Math.abs(mouseX/scaleW-307-1*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-2*1080*.1667f)<=35&&currentLVL>=8) {
          life = maxlife;           
          selected=8;
        }
        if (Math.abs(mouseX/scaleW-307-1*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-3*1080*.1667f)<=35&&currentLVL>=9) {  
          life = maxlife;
          selected=9;
        }
        if (Math.abs(mouseX/scaleW-307-1*1920*.333f)<=100&&Math.abs(mouseY/scaleH-165-4*1080*.1667f)<=35&&currentLVL>=10) { 
          life = maxlife;
          selected=10;
        }
        System.out.println("cords: "+mouseX/scaleW+"," + mouseY/scaleH);
        System.out.println("diff: " + Math.abs(-307-0*1920*.333f) + "," + Math.abs(-165+0*1080*.1667f) );
        System.out.println("scaleW: "+scaleW);
        System.out.println("scaleH: "+scaleH);

      }



      if (selected==1) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*1-333, -15+(1080*.1667f*1)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 1", 1920*.333f*1-333, 1080*.1667f*1);
      }
      if (selected==2) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*1-333, -15+(1080*.1667f*2)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 2", 1920*.333f*1-333, 1080*.1667f*2);
      }
      if (selected==3) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*1-333, -15+(1080*.1667f*3)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 3", 1920*.333f*1-333, 1080*.1667f*3);
      }
      if (selected==4) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*1-333, -15+(1080*.1667f*4)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 4", 1920*.333f*1-333, 1080*.1667f*4);
      }
      if (selected==5) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*1-333, -15+(1080*.1667f*5)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 5", 1920*.333f*1-333, 1080*.1667f*5);
      }
      if (selected==6) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*2-333, -15+(1080*.1667f*1)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 6", 1920*.333f*2-333, 1080*.1667f*1);
      }
      if (selected==7) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*2-333, -15+(1080*.1667f*2)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 7", 1920*.333f*2-333, 1080*.1667f*2);
      }
      if (selected==8) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*2-333, -15+(1080*.1667f*3)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 8", 1920*.333f*2-333, 1080*.1667f*3);
      }
      if (selected==9) {
        textSize(50);
        fill(0xffff0000);
        rect(1920*.333f*2-333, -15+(1080*.1667f*4)-2, 225, 103);
        fill(0xffffffff);
        text("LEVEL 9", 1920*.333f*2-333, 1080*.1667f*4);
      }
      if (selected==10) {
        textSize(45);
        fill(0xffff0000);  
        rect(1920*.333f*2-333, -15+(1080*.1667f*5)-2, 225, 103);
        fill(0xffffffff);   
        text("LEVEL 10", 1920*.333f*2-333, 1080*.1667f*5);
      }

      textSize(100);
      fill(0xff5e5e5e);

      text("Start!", 1920*.25f*3, 1080*.25f*1);

      textSize(40);

        fill(0xffffffff);

if(newgame==1)      text("New Game+", 1920*.25f*3, 1080*.25f*1.30f);
      if (Math.abs(mouseX/scaleW-1920*.25f*3)<135&&Math.abs(40+mouseY/scaleH-1080*.25f*1.4f)<23&&newgame==1&&mousePressed) {
        

        newgamescreen=true;        
      }
      
     
      textSize(100);

      if (selected>0) {
        textSize(100);
        fill(0xffffffff);

        text("Start!", 1920*.25f*3, 1080*.25f*1);
        if (mousePressed) {

          if (Math.abs(mouseX/scaleW-1920*.25f*3)<135&&Math.abs(40+mouseY/scaleH-1080*.25f*1)<43) {
            tester=true; 
            game=true;        //change
            levelSelect=false;  // change
            life=maxlife;
            //  d/ead=true;   
            victory=false;
            ultCount=270;
            shieldCount=270;
            shieldduration=0;
            ultduration=0;
            player.x=1920/2;
            player.y=1080/2;
            playing=false;

            if (selected==1) {
              enemyCounterLVL1_1=20;
              enemyCounterLVL1_2=20;
              crash++;
              enemyt1l=1+newGamePlus;
              enemyt2l=1+newGamePlus;
              wave1t=1;
              wave2t=1;
              spawn1max=200; //200

              invincibility=0;               
              spawn2max=200; //200

              spawn1=0;
              spawn2=100; //11
            }
                   if (selected==2) {
              enemyCounterLVL1_1=15;
              enemyCounterLVL1_2=20;
              crash++;
              enemyt1l=2+newGamePlus;
              enemyt2l=1+newGamePlus;
              spawn1max=200;

              invincibility=0;               
              spawn2max=150;

              spawn1=75;
              spawn2=0;
              wave1t=1;
              wave2t=1;
            }
            if (selected==3) {
              enemyCounterLVL1_1=20;
              enemyCounterLVL1_2=15;
              crash++;
              enemyt1l=1+newGamePlus;
              enemyt2l=2+newGamePlus;
              spawn1max=135;

              invincibility=0;               
              spawn2max=180;

              spawn1=0;
              spawn2=90;
              wave1t=1;
              wave2t=1;
            }
      if (selected==4) {   // lvlbookmark
          
         enemyCounterLVL1_1=25;
              enemyCounterLVL1_2=25;
              crash++;
              enemyt1l=2+newGamePlus;
              enemyt2l=2+newGamePlus;
              wave1t=1;
              wave2t=1;
              spawn1max=210;

              invincibility=0;               
              spawn2max=210;

              spawn1=0;
              spawn2=100;
              
 }

            if (selected==5) {
              enemyCounterLVL1_1=40;
              enemyCounterLVL1_2=40;
              crash++;
              enemyt1l=1+newGamePlus;
              enemyt2l=1+newGamePlus;
              spawn1max=240;

              invincibility=0;               
              spawn2max=240;

              spawn1=0;
              spawn2=0;
              wave1t=2;
              wave2t=2;
            }
 
 if (selected==6) {
             enemyCounterLVL1_1=15;
              enemyCounterLVL1_2=15;
              crash++;
              enemyt1l=3+newGamePlus;
              enemyt2l=3+newGamePlus;
              spawn1max=240;

              invincibility=0;               
              spawn2max=240;

              spawn1=120;
              spawn2=0;
              wave1t=1;
              wave2t=1;
            }

if (selected==7) {
             enemyCounterLVL1_1=25;
              enemyCounterLVL1_2=25;
              crash++;
              enemyt1l=2+newGamePlus;
              enemyt2l=3+newGamePlus;
              spawn1max=150;

              invincibility=0;               
              spawn2max=150;

              spawn1=95;
              spawn2=0;
              wave1t=1;
              wave2t=1;
            }
           
            
if (selected==8) {
             enemyCounterLVL1_1=30;
              enemyCounterLVL1_2=90;
              crash++;
              enemyt1l=3+newGamePlus;
              enemyt2l=1+newGamePlus;
              spawn1max=200;

              invincibility=0;               
              spawn2max=200;

              spawn1=0;
              spawn2=0;
              wave1t=1;
              wave2t=3;
            }
if (selected==9) {
             enemyCounterLVL1_1=100;
              enemyCounterLVL1_2=100;
              crash++;
              enemyt1l=1+newGamePlus;
              enemyt2l=1+newGamePlus;
              spawn1max=300;

              invincibility=0;               
              spawn2max=300;

              spawn1=0;
              spawn2=0;
              wave1t=4;
              wave2t=4;
            }


            
            if (selected==10) {
          
            
 bossBattle.add(new Boss(2,1+newGamePlus));
 enemyCounterLVL1_1=0;
 enemyCounterLVL1_2=0;
               invincibility=0;               

 
 }

            // if(crash==2)  crash=5/0;
          }

          /*else {
           tester=false;
           }
           */
        }

        //text(Boolean.toString(tester),1920*.25*3,1080*.25*3);
        //text("dx " + Math.abs(mouseX/scaleW-1920*.25*3) + " dy " + Math.abs(40+mouseY/scaleH-1080*.25*2),1920*.25*3,1080*.25*1);
      }
    }

    //    onex++;
  }                                                                  ////////// end of i
  else {

    if (game==true) {

      player.stepSize=7+(int)(3*movementUP);    //////////////////           where da upgrades take affect
      frameMAX= 17 -  (int)(2*reload);
      ultdurationMAX=180+(ult*60);
      shielddurationMAX=180+(shield*120);

      // ultCount= (150-(30*ult))*60;
      if (!setupE) {

        if (selected!=0) {
          if (spawn1<=0) {
            if (enemyCounterLVL1_1>0) {
              for (int i=0; i<wave1t; i++) {

                enemyOne.add(new Nongamer(1, enemyt1l));

                spawn1=spawn1max;
                enemyCounterLVL1_1--;
              }
            }
          }

          if (spawn2<=0) {
            if (enemyCounterLVL1_2>0) {
              for (int i=0; i<wave2t; i++) {
                enemyTwo.add(new Nongamer(2, enemyt2l));

                spawn2=spawn2max;
                enemyCounterLVL1_2--;
              }
            }
          }
          spawn1--;
          spawn2--;
        } // / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /  //end of lvl1
      } /// / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /     end of set up 
      ellipseMode(RADIUS);
      fill(0xff000000);
      rectMode(CORNER);
      rect(0, 0, 1920, 1080);
      fill(0xffFFFFFF);

      textSize(64);
      fill(0, 102, 153);
      fill(0xff03fcd3);
      //                                                           /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /     INFO
      text("HP= " +Integer.toString(life), 200, 100); 
      fill(0xff20fc03);
      text("$" +Integer.toString(gold), 500, 100); 

      fill(0xffffffff);
      textSize(64);

if(selected!=10) text("Death Ray", 900, 100); 
      fill(0xffD3D3D3);
      // ellipse(1125,80,45,45);
      textSize(50);
      //  text(Double.toString(ultCount),10,100);
      fill(0xfffcba03);

      arc(1125, 80, 45, 45, PI*3/2, radians((float)ultCount), PIE);
      if (ultduration>0) {
        fill(0xfffcba03);

        xfactor= (ultduration*360/ultdurationMAX)+270;
        arc(1125, 80, 45, 45, PI*3/2, radians((float)xfactor), PIE);
      }



      fill(0xffffffff);
      textSize(64);


if(selected!=10)  text("The Big K", 1400, 100);
else text("Death Ray and Big K are disabled",1300,100);

      fill(0xfffcba03);

      arc(1650, 80, 45, 45, PI*3/2, radians((float)shieldCount), PIE);

      if (shieldduration>0) {
        fill(0xfffcba03);

        yfactor= (shieldduration*360/shielddurationMAX)+270;
        arc(1650, 80, 45, 45, PI*3/2, radians((float)yfactor), PIE);
      }

      if (ultduration<=0&&selected!=10) {
        if (trueframe%5==0) 
          ultCount++;
          ultCount+=.08f*(ult-1);
      }
      if (shieldduration<=0&&selected!=10) {
        if (trueframe%5==0) 

          shieldCount+=(1+((shield-1)/10));
          shieldCount+=.08f*(shield-1);

      }

      ultduration-=2;
      shieldduration-=1.5f;
      if (ultCount>630) {

        if (trueframe%30<=15) {
          fill(0xfffcba03);

          ellipse(1125, 80, 45, 45);
        } else {
          fill(0xff27e327);

          ellipse(1125, 80, 45, 45);
        }
      }
      if (shieldCount>630) {

        if (trueframe%30<=15) {
          fill(0xfffcba03);

          ellipse(1650, 80, 45, 45);
        } else {
          fill(0xff27e327);
          ellipse(1650, 80, 45, 45);
        }
      }



      // if(ultduration>0)       text("ON", 150, 1080-100); 





      for (int i=0; i<enemyOne.size(); i++) {

        enemyOne.get(i).update(player.x, player.y);
        enemyOne.get(i).display();
        if (enemyOne.get(i).contact(player)) {
          /*  enemyOne.remove(i);                                     //////////// contact damage
           i--; */
          if (invincibility==0&&enemyOne.get(i).spawned==true) {
            life-=1; 
            invincibility=maxInvincibility;
          }
        }
      } ///////////////////////////////////////////////////////////////// end 1

    for (int i=0; i<bossBattle.size(); i++) {
//check
        bossBattle.get(i).update(player.x, player.y);
        bossBattle.get(i).display();
        if (bossBattle.get(i).contact(player)) {
          /*  enemyOne.remove(i);                                     //////////// contact damage
           i--; */
          if (invincibility==0&&bossBattle.get(i).spawned==true) {
            life-=1; 
            invincibility=maxInvincibility;
          }
        }
      }








      for (int i=0; i<enemyTwo.size(); i++) {
        //   double L =5/0;

        enemyTwo.get(i).update(player.x, player.y);
        enemyTwo.get(i).display();

        if (enemyTwo.get(i).contact(player)) {
          /*     
           invincibility=maxInvincibility;
           enemyTwo.remove(i);
           i--;
           */
          if ((invincibility==0&&enemyTwo.get(i).spawned==true)) {
            life-=1;  
            invincibility=maxInvincibility;
          }
        }

        if   (enemyTwo.size()!=0) {
          for (int j=0; j<enemyTwo.get(i).eB.size(); j++) {
            if (enemyTwo.get(i).eB.get(j).contact(player)) {
              enemyTwo.get(i).eB.remove(j);
              j--;
              if (invincibility==0&&enemyTwo.get(i).spawned) {
                life--;
                invincibility=maxInvincibility;
              }
            } else if (enemyTwo.get(i).eB.size()>0) {
              if (enemyTwo.get(i).eB.get(j).xPos<0||enemyTwo.get(i).eB.get(j).xPos>1920||enemyTwo.get(i).eB.get(j).yPos<0||enemyTwo.get(i).eB.get(j).yPos>1080) {
                enemyTwo.get(i).eB.remove(j);
                j--;
              }
            }
          }
        }
      } //////////////////////////////////////////// end 2
      
      
      
      
      
      
      
      if (ultduration>0) {
        ultCount=270;

        frameMAX=-1;
      }
      if (keyPressed&&ultCount>=630&&key=='q'&&shieldduration<=0) {
        ultduration=ultdurationMAX;
        ultCount=270;
      }
      if (keyPressed&&shieldCount>=630&&key=='e'&&ultduration<=0) {
        shieldduration=shielddurationMAX;
        shieldCount=270;
      }
      if (shieldduration>0) shieldCount=270;
      if (ultduration>0) ultCount=270;



      if (mousePressed&&frame<=0) {

        bullets.add(new Bullet(player.x, player.y, mouseX/scaleW, mouseY/scaleH));
        frame = frameMAX;

        if (shieldduration>0) {
          bullets.add(new Bullet(player.x, player.y, player.x, player.y+100));
          bullets.add(new Bullet(player.x, player.y, player.x, player.y-100));

          bullets.add(new Bullet(player.x, player.y, player.x +100, player.y));
          bullets.add(new Bullet(player.x, player.y, player.x -100, player.y));

          bullets.add(new Bullet(player.x, player.y, player.x +100, player.y+100));
          bullets.add(new Bullet(player.x, player.y, player.x +100, player.y-100));
          bullets.add(new Bullet(player.x, player.y, player.x -100, player.y+100));
          bullets.add(new Bullet(player.x, player.y, player.x -100, player.y-100));

          frame = frameMAX;
        }
      }

      if (invincibility%10==1) {
        fill(0xffe62939);
        player.display();
      } else {

        fill(0xff2d8dd6);
        player.display();
      }


      if (keys[1]&&player.y-50-player.stepSize>0) player.up();
      if (keys[2]&&player.x-50-player.stepSize>0) player.left();
      if (keys[3]&&player.y+50+player.stepSize<1080) player.down();
      if (keys[4]&&player.x+50+player.stepSize<1920) player.right();

      for (int i=0; i<bullets.size(); i++) {        ////////////////////////////////                                   start bullet

        if (ultduration>0||shieldduration>0) {
          bullets.get(i).sped= 1;
          //      crash = crash/0;
        } else bullets.get(i).sped= 1 +(.3333f*bulletS)-.3333f;

        bullets.get(i).update();
        bullets.get(i).display();
        if (bullets.size()!=0) {
          if (bullets.get(i).xPos>1920||bullets.get(i).xPos<0||bullets.get(i).yPos<0||bullets.get(i).yPos>1080) {
            bullets.remove(i);
            i--;
          } else {
            for (int j=0; j<enemyOne.size(); j++) {  

              if (i>=0) {
                if (bullets.get(i).contact(enemyOne.get(j))&&enemyOne.get(j).spawned) {
                  bullets.remove(i);

                  enemyOne.get(j).hp-=1*bulletD;



                  i--;

                  if (enemyOne.get(j).hp<=0) {
                    gold+=enemyOne.get(j).l*random(1, 11)*enemyOne.get(j).l*(.9f+selected/10.0f)*(newGamePlus+1);
                    enemyOne.remove(j);
                    j--;
                    if (random(0, 100)>=50) {
                      gold++;
                    }
                  }
                }//////                                            e
              }// just added
            
          
        }
          }

          for (int j=0; j<enemyTwo.size(); j++) {  

            if (i>=0&&bullets.get(i).contact(enemyTwo.get(j))&&enemyTwo.get(j).spawned) {
              enemyTwo.get(j).hp-=1*1*bulletD;


              bullets.remove(i);

              i--;

              if (enemyTwo.get(j).hp<=0) {
                enemyTwo.get(j).alive=false;
                enemyTwo.get(j).xPos=99999; 
                gold+=enemyTwo.get(j).l*random(1, 11)*enemyTwo.get(j).l*(.9f+selected/10.0f)*(newGamePlus+1);

                if (random(0, 100)>=50) {
                  gold++;
                }
              }
            }
          }
          
          for (int j=0; j<bossBattle.size(); j++) {  
         //   System.out.println(bossBattle.get(j).spawnCountdown);
            if (i>=0&&bullets.get(i).contact(bossBattle.get(j))&&bossBattle.get(j).spawned&&bossBattle.get(j).spawnCountdown<0) { //&&bossBattle.get(j).spawned&&bossBattle.get(j).spawnCountdown<0
              bossBattle.get(j).hp-=1*1*bulletD;
               gold+=bulletD*3*(newGamePlus+1)*(newGamePlus+1);

              bullets.remove(i);

              i--;

              if (bossBattle.get(j).hp<=0) {
                bossBattle.get(j).alive=false;
                bossBattle.get(j).xPos=99999; 
                
                gold+=bossBattle.get(j).l*3333;
  bossBattle.remove(j);
  j--;
              
              }
            }
           /* if(bossBattle.size()>0) {
for (int k=0; k<bossBattle.get(j).eB.size(); k++) {
           

             if (bossBattle.get(j).eB.get(k).contact(player)) {
              bossBattle.get(j).eB.remove(k);
              k--;
              if (invincibility==0&&bossBattle.get(j).spawned) {
                life--;
                invincibility=maxInvincibility;
              }
            } else if (bossBattle.get(j).eB.size()>0) {
              
              if (bossBattle.get(j).eB.get(k).xPos<0||bossBattle.get(j).eB.get(k).xPos>1920||bossBattle.get(j).eB.get(k).yPos<0||bossBattle.get(j).eB.get(k).yPos>1080) {
                bossBattle.get(j).eB.remove(k);
                k--;
              }
            }
          }

        
       } */
    
  }// end boss thing
        

          
          for (int j=0; j<enemyTwo.size(); j++) {
            if (enemyTwo.get(j).eB.size()==0&&enemyTwo.get(j).hp<=0&&enemyTwo.size()>1) {

              enemyTwo.remove(j);
              j--;
            } else if (enemyTwo.get(j).hp<=0&&enemyTwo.size()==1&&enemyCounterLVL1_2==0) {
              enemyTwo.remove(j);

              j--;
            }
          }
        }
      }                 ////// / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / end b

      //  bill.display();
      // bill.update();
      frame--;
      //  f.display();
      //  f.update(player.x,player.y);
      //  f2.display();
      // f2.update(player.x,player.y);
      //stroke(#FFFFFF);
      fill(0, 102, 153, 204);

      // text("x cord: " + (int)f.xPos +" y cord: " + (int)f.yPos,1000,500);
      // text("dx: " + f.dx +" dy: " + f.dy,1000,800);
      // text(Boolean.toString(f.contact(player)),1000,500);
      // text(Integer.toString(enemyTwo.get(0).eB.size()),1000,800);
      // text(Integer.toString(bullets.size()),1000,500);
      // text(Integer.toString(enemyTwo.size()),1000,500);
      // text(Integer.toString(enemyTwo.get(0).eB.size()),1000,800);

      /*
for(int i=0;i<f2.eB.size();i++) {
       
       f2.eB.get(i).update(); 
       f2.eB.get(i).display(); 
       
       } */



      if (enemyOne.size()==0&&enemyTwo.size()==0&&enemyCounterLVL1_1==0&&enemyCounterLVL1_2==0&&bossBattle.size()==0) { //start of win condition
        game=false;
        //   victory=true; 
        gold+=300*selected*(newGamePlus+1);
        vicded =120;
        levelSelect=false;  
        playing=false;
        if (currentLVL==selected) {
          currentLVL++;
         
// GOLD
  str2 =""+currentLVL;        //bookmark
          sb2 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch2 = str2.toCharArray();
      for(int i = 0; i < ch2.length; i++) {
         String hexString = Integer.toHexString(ch2[i]);
         sb2.append(hexString);
      }
       result2 = sb2.toString();
      System.out.println("hexstring: "+result2);
   //   BigInteger hex = new BigInteger(result2);
      
       encrypted= (new BigInteger(result2)).modPow(bigE2,bigN2); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[1] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );



      
    
  }

        for (int i=0; i<bullets.size(); i++) {
          bullets.remove(i);
          i--;
        }
        game=false;
        str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );

        victory=true;
      }       //                                    end of win condition 
if(bossBattle.size()>0) {
  for (int k=0; k<bossBattle.get(0).eB.size(); k++) {
           

             if (bossBattle.get(0).eB.get(k).contact(player)) {
             /* bossBattle.get(0).eB.remove(k);
              k--; */
                  bossBattle.get(0).eB.remove(k);
            k--;  
              if (invincibility==0&&bossBattle.get(0).spawned) {
                life--;
                invincibility=maxInvincibility;
            
            }
            } else if (bossBattle.get(0).eB.size()>0) {
              
              if (bossBattle.get(0).eB.get(k).xPos<0||bossBattle.get(0).eB.get(k).xPos>1920||bossBattle.get(0).eB.get(k).yPos<0||bossBattle.get(0).eB.get(k).yPos>1080) {
                bossBattle.get(0).eB.remove(k);
                k--;
              }
            }
          }
    }
      if (life<=0) {
        game=false;
        dead=true; 
        victory=false; 
        vicded =120;

        playing=false;
        for (int i=0; i<bullets.size(); i++) {
          bullets.remove(i);
          i--;
        }
        game=false;
        
        str1 =""+gold;        //bookmark
          sb1 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch1 = str1.toCharArray();
      for(int i = 0; i < ch1.length; i++) {
         String hexString = Integer.toHexString(ch1[i]);
         sb1.append(hexString);
      }
       result1 = sb1.toString();
      System.out.println("hexstring: "+result1);
   //   BigInteger hex = new BigInteger(result1);
      
       encrypted= (new BigInteger(result1)).modPow(bigE1,bigN1); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[0] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );

        
        dead=true;
      }
      if (invincibility>0) invincibility--;
    } //game==true
  } // end of else of i



  if (dead==true) {  //                          //start of dead screen
    vicded--;

    enemyCounterLVL1_1=0;
    enemyCounterLVL1_2=0;
    fill(000000);
    rect(0, 0, 1920, 1080);
    textSize(100);
    fill(0xffffffff);
    for (int i=0; i<enemyOne.size(); i++) {
      enemyOne.remove(i);
    }
    for (int i=0; i<enemyTwo.size(); i++) {
      enemyTwo.remove(i);
    }
    for (int i=0; i<bossBattle.size(); i++) {
      bossBattle.remove(i);
    }


    text("Game over!", 1920/2, 1080/2-350); 


    fill(0xff2d8dd6);
    ellipse(1920/2, 1080/2-50, 200, 200);

    fill(0xff000000);
    textSize(150);
    text("X  X", 1920/2, 1080/2-50); 

    rotate(PI/2);
    //     text("Ş",1920/2,1080/2); 
    text("(", 1080/2+25, (1920/2)*-1+45);



    rotate(3*PI/2);

    fill(0xffffffff);
    textSize(100);
 fill(0xffff0000);
    rectMode(CENTER);

    rect(1920/2,1080/2+316,590,110);
        fill(0xffffffff);
    text("Level Select", 1920/2, 1080/2+350); 
    if (mousePressed&&Math.abs(mouseX/scaleW-1920/2)<290&&Math.abs(mouseY/scaleH-1080/2-350+33)<37&&vicded<=0) {
      levelSelect=true;
      dead=false; 
      shop=false;
      playing=false;
      selected=0;
    }

    textSize(50);

    //   text("dx: " + Math.abs(mouseX/scaleW-1920/2) + "dy: " + Math.abs(mouseY/scaleH-1080/2-350+37),1920/2+600,1080/2+350); 

    text("<----- u killed him smh", 1920/2+500, 1080/2);
 

selected=0;

} //                                                end of dead screen


  if (victory) { ////                                                 start of victory
    if(selected<=9) {
    vicded--;
    enemyCounterLVL1_1=0;
    enemyCounterLVL1_2=0;

    fill(000000);
    rect(0, 0, 1920, 1080);
    textSize(100);
    fill(0xffffffff);

    for (int i=0; i<enemyOne.size(); i++) {
      enemyOne.remove(i);
    }
    for (int i=0; i<enemyTwo.size(); i++) {
      enemyTwo.remove(i);
    }


    text("You Win!", 1920/2, 1080/2-350); 


    fill(0xff2d8dd6);
    ellipse(1920/2, 1080/2-50, 200, 200);

    fill(0xff000000);
    textSize(150);
    text("O O", 1920/2, 1080/2-50); 

    rotate(PI/2);
    //     text("Ş",1920/2,1080/2); 
    text(")", 1080/2+25, (1920/2)*-1+45);



    rotate(3*PI/2);

    fill(0xffffffff);
    textSize(100);
 fill(0xffff0000);
    rectMode(CENTER);

    rect(1920/2,1080/2+316,590,110);
        fill(0xffffffff);

    text("Level Select", 1920/2, 1080/2+350); 
    if (mousePressed&&Math.abs(mouseX/scaleW-1920/2)<290&&Math.abs(mouseY/scaleH-1080/2-350+33)<37&&vicded<=0) {
      levelSelect=true;
      dead=false; 
      shop=false;
      victory=false;
      playing=false;
      selected=0;
    }

    textSize(50);

    //     text("dx: " + Math.abs(mouseX/scaleW-1920/2) + "dy: " + Math.abs(mouseY/scaleH-1080/2-350+37),1920/2+600,1080/2+350); 

    //  text("<----- u killed him smh",1920/2+500,1080/2);
    //   text("<----- look how happy he is",1920/2+580,1080/2);
    text("<----- he is very proud of u", 1920/2+580, 1080/2);
  
    }

if(selected==10) {
  if(newGamePlus==0) {
    fill(0xff000000);
      rectMode(CORNER);
      rect(0, 0, 1920, 1080);
          fill(0xffffffff);
    textSize(100);
    text("Thank you for playing my game!", 1920/2, 200);
    
    textSize(70);
    text("Use the Konami Code at the shop", 1920/2, 600); 
    text("any time to get a ton of money!", 1920/2, 700); 

        textSize(100);
    text("New game+ unlocked!", 1920/2, 400); 
    newgame=1;
vicded--;
  fill(0xffffffff);
    textSize(100);

    rectMode(CENTER);
    fill(0xffff0000);
    
    rect(1920/2,1080/2+316,590,110);
        fill(0xffffffff);

    text("Level Select", 1920/2, 1080/2+350); 
    if (mousePressed&&Math.abs(mouseX/scaleW-1920/2)<290&&Math.abs(mouseY/scaleH-1080/2-350+33)<37&&vicded<=0) {
      levelSelect=true;
      dead=false; 
      shop=false;
      playing=false;
            victory=false;
            selected=0;

str10 =""+newgame;        //bookmark
          sb10 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch10 = str10.toCharArray();
      for(int i = 0; i < ch10.length; i++) {
         String hexString = Integer.toHexString(ch10[i]);
         sb10.append(hexString);
      }
       result10 = sb10.toString();
      System.out.println("hexstring: "+result10);
   //   BigInteger hex = new BigInteger(result10);
      
       encrypted= (new BigInteger(result10)).modPow(bigE10,bigN10); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[9] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );


    }
}
else {
   rectMode(CORNER);
   fill(0xff000000);
      rect(0, 0, 1920, 1080);
         fill(0xffffffff);
vicded--;
   textSize(75);

    text("Wow, you beat the game multiple times!", 1920/2, 200);

    newgame=1;

   textSize(75);
    text("New game+ unlocked again!", 1920/2, 400); 

    text("How many times can you beat the game?", 1920/2, 600); 
 rectMode(CENTER);
    fill(0xffff0000);
    
    rect(1920/2,1080/2+316,590,110);
        fill(0xffffffff);

textSize(100);
    text("Level Select", 1920/2, 1080/2+350); 
    if (mousePressed&&Math.abs(mouseX/scaleW-1920/2)<290&&Math.abs(mouseY/scaleH-1080/2-350+33)<37&&vicded<=0) {
      levelSelect=true;
      dead=false; 
      shop=false;
      playing=false;
            victory=false;
            selected=0;

str10 =""+newgame;        //bookmark
          sb10 = new StringBuffer(); //                               to hexstring
      //Converting string to character array
       ch10 = str10.toCharArray();
      for(int i = 0; i < ch10.length; i++) {
         String hexString = Integer.toHexString(ch10[i]);
         sb10.append(hexString);
      }
       result10 = sb10.toString();
      System.out.println("hexstring: "+result10);
   //   BigInteger hex = new BigInteger(result10);
      
       encrypted= (new BigInteger(result10)).modPow(bigE10,bigN10); //                        encryption 
    // encrypted=encrypted.add(new BigInteger("00000000"));
      System.out.println("Encrypted: "+ encrypted);
        
        
        saveData[9] = encrypted.toString();
        
              saveStrings("/data/DO_NOT_EDIT.txt", saveData );
    }




}
    }
  
  
  



} //                                    end of victory


  trueframe++;

  if (!playing) { 
    for (int i=0; i<sounds.size(); i++) {

      sounds.get(i).pause(); 
      sounds.get(i).setGain(-15);
    }

    if (levelSelect&&!shop) { 

      sounds.get(0).rewind();
      sounds.get(0).loop(5);
      //sounds.get(0).play();
      playing=true;
    }
    if (shop) {
      sounds.get(1).rewind();

      sounds.get(1).loop();
      playing=true;
    }
    if (victory) {
      sounds.get(2).rewind();

      sounds.get(2).loop();
      playing=true;  
      //crash=crash/0;
    }

    if (dead) {
      sounds.get(3).rewind();
      sounds.get(3).skip(2200);

      sounds.get(3).loop();

      playing=true;
    }
    if (game==true&&selected==1) {
      sounds.get(4).rewind();

      sounds.get(4).loop();
      playing=true;
    }
    if (game==true&&selected==2) {
      sounds.get(5).rewind();

      sounds.get(5).loop();

      playing=true;
    }
    if (game==true&&selected==3) {
      sounds.get(6).rewind();

      sounds.get(6).loop();

      playing=true;
    }
    if (game==true&&selected==4) {
      sounds.get(7).rewind();

      sounds.get(7).loop();

      playing=true;
    }
    if (game==true&&selected==5) {
      sounds.get(8).rewind();

      sounds.get(8).loop();

      playing=true;
    }
    if (game==true&&selected==6) {
      sounds.get(9).rewind();

      sounds.get(9).loop();

      playing=true;
    }
    if (game==true&&selected==7) {
      sounds.get(10).rewind();

      sounds.get(10).loop();

      playing=true;
    }
    if (game==true&&selected==8) {
      sounds.get(11).rewind();

      sounds.get(11).loop();

      playing=true;
    }
    if (game==true&&selected==9) {
      sounds.get(12).rewind();
      sounds.get(12).skip(14500);

      sounds.get(12).loop();

      playing=true;
    }
    if (game==true&&selected==10) {
      sounds.get(13).rewind();

      sounds.get(13).loop();

      playing=true;
    }


    //one.play();
    //   menu.play();
    //    crash=crash/0;
  }
  onex++;
if(selected==10&&levelSelect==false&&shop==false&&dead==false&&victory==false&&bossBattle.size()>0) {
if(bossBattle.get(0).spawnCountdown>0) {
  fill(0xffffffff);
  textSize(100);
text("GET READY",1920/2,1080/2);  
  

}


}

}                                  //////////////////////////////////// end of draw

public void keyPressed() {

  if (key=='w') {
    keys[1]=true;
  }

  if (key=='a') {
    keys[2]=true;
  }
  if (key=='s') {
    keys[3]=true;
  }


  if (key=='d') {
    keys[4]=true;
  }
  // aaaaaaaaaaaaaa
  /* if (key=='1') {    /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /  /   what did this do ???????????????????????????????????
   
   bullets.add(new Bullet(player.x, player.y, mouseX/scaleW, mouseY/scaleH));
   }
   */
}


public void keyReleased()
{
  if (key=='w') {
    keys[1]=false;
  }
  if (key=='a') {
    keys[2]=false;
  }
  if (key=='s') {
    keys[3]=false;
  }
  if (key=='d') {
    keys[4]=false;
  }
}





class EnemyBullet {
double xSTART;
double ySTART;
double xEND;
double yEND;
double xPos;
double yPos;
double rise;
double run;
double xRate;
double yRate;
double xPAIN;
double yPain;
double s;
double slope;
double dx;
double dy;
  EnemyBullet(double xStart,double yStart,double xEnd,double yEnd,int lvl) {
    
    xPos = xStart;
    yPos = yStart;
    xSTART = xStart;
    ySTART = yStart;
    xEND = xEnd;
    yEND = yEnd;
    rise= yEnd-yStart;
    run = xEnd- xStart;
    s=lvl*2+5;
 //   List<Point> a = bls(new Point(xSTART,ySTART),new Point(xEND,yEND),new Point(xSTART,ySTART),100.0);
       
/*

     rise= yPos-charY;
     run= xPos-charX;
     slope = rise/run;
     dx=Math.sqrt((distance*distance)/((slope*slope)+1));
     dy=dx*slope;
     
*/
     slope=rise/run;
     dx=Math.sqrt((s*s)/((slope*slope)+1));
     dy=dx*slope;


}
  public void dsiplay() {
        fill(0xffff00fb);

    ellipse((float) xPos,(float) yPos,(float) 25,25);
    
  }
  public void update() {
    
    if(xEND<xSTART){     
    xPos-=dx;
    yPos-=dy;
    }
    else {
      xPos+=dx;
    yPos+=dy;
      
      
      
    }

}
  public boolean contact(Characters h) {
 /* if(Math.abs(h.x-xPos)<25) return true;
    if(Math.abs(h.y-yPos)<25) return true;

  
 return false; */
double b= Math.sqrt(((h.x-xPos)*(h.x-xPos))+((h.y-yPos)*(h.y-yPos)));
if(b<=75) {
  
 return true; 
}
return false;

} ////////// end contact

  
  




}






class Nongamer {
  int t;
  int l;
  double xPos;
  double yPos;
  double xS;
  double yS;
  double rise;
  double run;
  double slope;
  double distance;
  double dx;
  double dy;
  int eFrame=0;
  ArrayList<EnemyBullet> eB = new ArrayList<EnemyBullet>();
  boolean alive=true;
  int hp;
  boolean spawned=false;
  int spawnCountdown=60;
  
  
 Nongamer(int tt,int ll) {
   t = tt;
   l=ll;
   xS=random(0,1920);
   yS=random(0,1080);
   xPos = xS;
   yPos = yS;
   distance = 5+(1*ll);
   hp=(ll*3)+1+(0);
//   hp=500;
   
 }
  
   public void update(double charX,double charY) {
     if(spawned==true) {
       //if(alive) {
    // List<Point> a = bls(new Point(xPos,yPos),new Point(charX,charY),new Point(charX,charY),100.0);
    //  rise=(double)(yPos-a.get(0).y);
    //  run=(double)(xPos-a.get(0).x);
     rise= yPos-charY;
     run= xPos-charX;
     slope = rise/run;
     dx=Math.sqrt((distance*distance)/((slope*slope)+1));
     dy=dx*slope;
     
     if(t==1) {
     
   
 
 if(xPos>charX&&yPos>charY) {
   xPos-=dx;
   yPos-=dy;
 }
 if(xPos<charX&&yPos>charY) {
   xPos+=dx;
   yPos+=dy;
 }
 if(xPos<charX&&yPos<charY) {
   xPos+=dx;
   yPos+=dy;
 }
 if(xPos>charX&&yPos<charY) {
   xPos-=dx;
   yPos-=dy;
 }
 
 if(dy==0||dx==0) {
      if(charX-xPos==0&&charY-yPos>0) yPos+=distance;
             if(charX-xPos==0&&charY-yPos<0) yPos-=distance;
                if(charX-xPos>0&&charY-yPos==0) xPos+=distance;
                   if(charX-xPos<0&&charY-yPos==0) xPos-=distance;
 }
 
     } // 1
 if(t==2) {
  if(eFrame==120/l||eFrame<0) {  
  eFrame=0; 
    
  if(alive) eB.add(new EnemyBullet(xPos,yPos,charX,charY,l));
  
}
   else eFrame++;
   for(int i=0;i<eB.size();i++) {
    eB.get(i).update();
    eB.get(i).dsiplay(); 
   } 
 
 
 }
 
 
       //}
     } 
 }// end update
   
 
   
 
 
 
    
public void display() {
  
  
  if(spawned==true) {
  
  ellipseMode(RADIUS);
 if(t==1) {
  fill(0xffa742f5);
    ellipse((float) xPos, (float) yPos, (float) 50,50);  
    textAlign(CENTER);
  fill(0xff000000);
  textSize(64);

  text(Integer.toString(hp), (float) xPos, (float) yPos+20); 
 }
  if(t==2) {
  fill(0xfffa7541);
    ellipse((float) xPos, (float) yPos, (float) 50,50);  
    textAlign(CENTER);
  fill(0xff000000);
  textSize(64);

  text(Integer.toString(hp), (float) xPos, (float) yPos+20); 
 }
  }
  
  else {
   if(spawnCountdown<=0) {
       eFrame=-1000; 

     spawned=true; 

   }
    else {
      
      fill(0xff8c0b10);
    ellipse((float) xPos, (float) yPos, (float) 50,50);
    spawnCountdown--;
    }
    
  }
  
  
} //                                                                                                  display

public boolean contact(Characters h) {
 /* if(Math.abs(h.x-xPos)<25) return true;
    if(Math.abs(h.y-yPos)<25) return true;

  
 return false; */
double b= Math.sqrt(((h.x-xPos)*(h.x-xPos))+((h.y-yPos)*(h.y-yPos)));
if(b<=100) {
  
 return true; 
}
return false;

}



  
  

}
  
  
  
   
  
  
class Point {
        double x, y;

        public Point(double x, double y) { this.x = x; this.y = y; }

        @Override
        public String toString() {
            return "Point [x=" + x + ", y=" + y + "]";
        }
    }






class Boss {
  int t;
  int l;
  double xPos;
  double yPos;
  double xS;
  double yS;
  double rise;
  double run;
  double slope;
  double distance;
  double dx;
  double dy;
  int eFrame=0;
  ArrayList<EnemyBullet> eB = new ArrayList<EnemyBullet>();
  boolean alive=true;
  int hp;
  boolean spawned=true;
  int spawnCountdown=180;
  int ap;
  int crash=1;
  BigDecimal xaim;
  BigDecimal yaim;
  double xaim2;
  double yaim2;
  int shoot=0;
  int shoot2=0;
  boolean firstcheck=true;
  boolean secondcheck=false;

  boolean firstcheck2=false;
  boolean secondcheck2=true;
  boolean idunnowhyineedthis= false;

  int charge =3;
  int chargeCooldown = 120;
  int shots =0;
  int shotsCooldown = 0;
  double playerX;
  double playerY;
  double playerX2;
  double playerY2;
  boolean upright=false;
  boolean downright=false;
  boolean upleft=false;
  boolean downleft=false;
  boolean moving=false;


  double slopeside;
  double aside;
  double bside;
  double cside;
  double sidedistance;
  double s1x;
  double s1y;
  double s2x;
  double s2y;
  double apDuration=600;

  boolean todacenter=true;
  int toDacenter=120;
  int halfWidth= 1920/2;
  int halfHeight= 1080/2;

  double chargeToX;
  double chargeToY;
  boolean targetAcquired=false;
  boolean corner=false;
  boolean shootOn=false;
  int shotsLeft;
  boolean outOfCorner=true;
  int cycles;

  Boss(int tt, int ll) {
    t = tt;
    l=ll;


    xS= 1920/2 +1;
    yS= 250;



    // xS=random(0,1920);
    // yS=random(0,1080);

    //  xS=200;
    //  yS=1080-200;

    xPos = xS;
    yPos = yS;
    distance = 6;
    //  hp=(ll*3)+1+(0);
    hp=2000*ll;
    ap=0;
  }

  public void update(double charX, double charY) {           ////////                            start of update
    playerX2=charX;
    playerY2=charY;

    if (spawnCountdown<=-1) {

      if (ap==0) {     // start of ap0

        distance=6;

        if (Math.abs(xPos - 1920/2)>=10||Math.abs(yPos - 1080/2)>=10) {

          rise= yPos-1080/2;
          run= xPos-1920/2;
          slope = rise/run;
          dx=Math.sqrt((distance*distance)/((slope*slope)+1));
          dy=dx*slope;


          if (xPos>halfWidth&&yPos>halfHeight) {
            xPos-=Math.abs(dx);
            yPos-=Math.abs(dy);
          }
          if (xPos<halfWidth&&yPos>halfHeight) {
            xPos+=Math.abs(dx);
            yPos-=Math.abs(dy);
          }
          if (xPos<halfWidth&&yPos<halfHeight) {
            xPos+=Math.abs(dx);
            yPos+=Math.abs(dy);
          }
          if (xPos>halfWidth&&yPos<halfHeight) {
            xPos-=Math.abs(dx);
            yPos+=Math.abs(dy);
          }

          xaim= new BigDecimal("1000");
        } ///                end moving to da center


        else { // start of shooty shooty

          eB.add(new EnemyBullet(xPos, yPos, xPos-(((xaim.divide(new BigDecimal("1000"))).remainder(new BigDecimal("2"))).subtract(new BigDecimal("1"))).doubleValue(), yPos-Math.sqrt(1-Math.pow((((xaim.divide(new BigDecimal(1000))).remainder(new BigDecimal("2"))).subtract(new BigDecimal("1"))).doubleValue(), 2)), 10));  

          eB.add(new EnemyBullet(xPos, yPos, xPos+(((xaim.divide(new BigDecimal("1000"))).remainder(new BigDecimal("2"))).subtract(new BigDecimal("1"))).doubleValue(), yPos+Math.sqrt(1-Math.pow((((xaim.divide(new BigDecimal(1000))).remainder(new BigDecimal("2"))).subtract(new BigDecimal("1"))).doubleValue(), 2)), 10));  

          if (shoot<=0) { 
            eB.add(new EnemyBullet(xPos, yPos, random(0, 1920), random(0, 1080), 1));  
            shoot=10;
          }

          xaim=xaim.add(new BigDecimal("10"));
          apDuration--;
        } // end of shooty shooty

        shoot--;
        if (apDuration<=0) {
          ap=1;
          toDacenter=120;
          targetAcquired=false;
          cycles=2;
        }
      } // end of ap0


      if (ap==1) {
        System.out.println("shots left: " + shotsLeft + " cycles: " + cycles);
        if(toDacenter>0) {  // go up a little
        
        yPos-=2;
        toDacenter--;
        } // stop going up
        
        else { // is in the center, time to start charge/shooty
            if(targetAcquired==false) { //find where to charge to
               targetAcquired=true;
               chargeToX=playerX2;
               chargeToY=playerY2;
               
               distance=60;
               rise= yPos-chargeToY;
               run= xPos-chargeToX;
               slope = rise/run;
               dx=Math.abs(Math.sqrt((distance*distance)/((slope*slope)+1)));
               dy=Math.abs(dx*slope); 
               
                   if (xPos<chargeToX&&yPos<chargeToY) {
                    upleft=false;
                    upright=false;
                    downleft=false;
                    downright=false;
                    
                    upleft=true;
                    moving=true;
                    System.out.println("upleft");
                  }

                  if (xPos>chargeToX&&yPos<chargeToY) {
                    upleft=false;
                    upright=false;
                    downleft=false;
                    downright=false;
                    
                    upright=true;
                    moving=true;
                    System.out.println("upright");
                  }
                   if (xPos>chargeToX&&yPos>chargeToY) {
                    upleft=false;
                    upright=false;
                    downleft=false;
                    downright=false;
                    
                    downleft=true;
                    moving=true;
                    System.out.println("downleft");
                  }
                   if (xPos<chargeToX&&yPos>chargeToY) {
                    upleft=false;
                    upright=false;
                    downleft=false;
                    downright=false;
                    
                    downright=true;
                    moving=true;
                    System.out.println("downright");
                  }
              

                 
            
              }
            else {  //target has been acquired, time to charge
               if(upright) {       
                  xPos-=Math.abs(dx);
                  yPos+=Math.abs(dy); 

               }
               
               if(upleft) {
                   xPos+=Math.abs(dx);
                  yPos+=Math.abs(dy);

               }
               
               if(downleft) {
                  xPos-=Math.abs(dx);
                  yPos-=Math.abs(dy);

                 
               }
               
               if(downright) {
                  xPos+=Math.abs(dx);
                  yPos-=dy; 
               }
               if(!(xPos<=100||xPos>1920-100||yPos<=100||yPos>1080-100)) {
               outOfCorner=true;
               }
               if(outOfCorner&&(xPos<=100||xPos>1920-100||yPos<=100||yPos>1080-100)) {
                  downright=false;
                  downleft=false;
                  upleft=false;
                  upright=false;
                  outOfCorner=false;
                  corner=true;
                  shootOn=true;
                  shoot2=30;
                  shotsLeft=4;
                
               }
               // super sus
                if(((xPos<=100&&xPos>1920-100)||(yPos<=100&&yPos>1080-100)||(xPos<=100&&yPos<=100)||(xPos<=100&&yPos>1080-100)||(yPos<=100&&xPos>1920-100)||(yPos>1080-100&&xPos>1920-100))&&!idunnowhyineedthis) {
                  downright=false;
                  downleft=false;
                  upleft=false;
                  upright=false;
                  outOfCorner=false;
                  corner=true;
                  shootOn=true;
                  shoot2=30;
                  shotsLeft=4;
             //crash=0;
             idunnowhyineedthis=true;
             }
               
               
            } // end of charging
          if(shootOn) {
                          shoot2--;
                              System.out.println("shoot2: " + shoot2);
              if(shotsLeft>=0) {
                if(shoot2<=0) {
                              crash=crash/crash;
                    slopeside= (playerX2-xPos)/(yPos-playerY2);
                      shoot2=40;
                    sidedistance=150;
                    shotsLeft--;
                    
                    if(shotsLeft>0){
                    aside= slopeside*slopeside+1;
                    bside= -2*playerX2 - (2*playerX2)*(slopeside*slopeside);
                    cside= -sidedistance*sidedistance + playerX2*playerX2 + slopeside*slopeside*playerX2*playerX2;

                    s1x= (-bside + Math.sqrt(bside*bside - 4*aside*cside))/(2*aside);

                    s1y = slopeside*(s1x-playerX2) + playerY2;

                    s2x = (-bside - Math.sqrt(bside*bside - 4*aside*cside))/(2*aside);

                    s2y = slopeside*(s2x-playerX2) + playerY2;
                    // ellipse((float)s1x,(float)s1y,20,20);

                    eB.add(new EnemyBullet(xPos, yPos, playerX2, playerY2, 15));

//                    ellipse((float)s1x, (float)s1y, 20, 20);
  //                  ellipse((float)s2x, (float)s2y, 20, 20);

                    eB.add(new EnemyBullet(xPos, yPos, s1x, s1y, 15));
                    eB.add(new EnemyBullet(xPos, yPos, s2x, s2y, 15));

                    slopeside= (playerX2-xPos)/(yPos-playerY2);

                    sidedistance=300;

                    aside= slopeside*slopeside+1;
                    bside= -2*playerX2 - (2*playerX2)*(slopeside*slopeside);
                    cside= -sidedistance*sidedistance + playerX2*playerX2 + slopeside*slopeside*playerX2*playerX2;

                    s1x= (-bside + Math.sqrt(bside*bside - 4*aside*cside))/(2*aside);

                    s1y = slopeside*(s1x-playerX2) + playerY2;

                    s2x = (-bside - Math.sqrt(bside*bside - 4*aside*cside))/(2*aside);

                    s2y = slopeside*(s2x-playerX2) + playerY2;
                    // ellipse((float)s1x,(float)s1y,20,20);

                    ellipse((float)s1x, (float)s1y, 20, 20);
                    ellipse((float)s2x, (float)s2y, 20, 20);

                    eB.add(new EnemyBullet(xPos, yPos, s1x, s1y, 15));
                    eB.add(new EnemyBullet(xPos, yPos, s2x, s2y, 15));
                }
                  if(shotsLeft==-1) {
               
                    if(cycles>0) {
                    targetAcquired=false;
                    upleft=false;
                    upright=false;
                    downleft=false;
                    downright=false; 
                    cycles--;
                    idunnowhyineedthis=false;
                    }
                    else {
                      targetAcquired=false;
                    upleft=false;
                    upright=false;
                    downleft=false;
                    downright=false; 
                    cycles--;
                     apDuration=600; 
                      ap=0;
                    }
              }
            
            
                } // end of shooty invincibility frame thing
              }
              
              
          
          } // end of shooting
         } //  time to stop charge/shooty
        
      
    } // end of ap1
    
  

} else    spawnCountdown--;



    for (int k=0; k<eB.size(); k++) {             
      eB.get(k).update();
      eB.get(k).dsiplay();
    }
  }// end update







  public void display() {


    if (spawned==true) {

      ellipseMode(RADIUS);
      if (ap==0) {
        fill(0xffb8021a);
        ellipse((float) xPos, (float) yPos, (float) 100, 100);  
        textAlign(CENTER);
        fill(0xff000000);
        textSize(80);

        text(Integer.toString(hp), (float) xPos, (float) yPos+30);
      }
      if (ap==1) {
        
        if(shotsLeft==0&&cycles==0){
           fill(0xffb8021a);
        ellipse((float) xPos, (float) yPos, (float) 100, 100);  
        textAlign(CENTER);
        fill(0xff000000);
        textSize(80);

        text(Integer.toString(hp), (float) xPos, (float) yPos+30);
          
        }
        
        
      else  if(shotsLeft>0) {
        
        fill(0xfffa7541);
        ellipse((float) xPos, (float) yPos, (float) 100, 100);  
        textAlign(CENTER);
        fill(0xff000000);
        textSize(80);

        text(Integer.toString(hp), (float) xPos, (float) yPos+30);
        }
        
        else {
        
           
             fill(0xffa742f5);
        ellipse((float) xPos, (float) yPos, (float) 100, 100);  
        textAlign(CENTER);
        fill(0xff000000);
        textSize(80);

        text(Integer.toString(hp), (float) xPos, (float) yPos+30);
           
          
          
          
          }
    
        }
    }
  } //                                                                                                  display

  public boolean contact(Characters h) {
    /* if(Math.abs(h.x-xPos)<25) return true;
     if(Math.abs(h.y-yPos)<25) return true;
     
     
     return false; */
    double b= Math.sqrt(((h.x-xPos)*(h.x-xPos))+((h.y-yPos)*(h.y-yPos)));
    if (b<=150) {

      return true;
    }
    return false;
  }
}





class Bullet {
double xSTART;
double ySTART;
double xEND;
double yEND;
double xPos;
double yPos;
double rise;
double run;
double xRate;
double yRate;
double xPAIN;
double yPain;
double distance;
double sped=1;

  Bullet(double xStart,double yStart,double xEnd,double yEnd ) {
    
    xPos = xStart;
    yPos = yStart;
    xSTART = xStart;
    ySTART = yStart;
    xEND = xEnd;
    yEND = yEnd;
    rise= yEnd-yStart;
    run = xEnd- xStart;
    List<Point> a = bls(new Point(xSTART,ySTART),new Point(xEND,yEND),new Point(xSTART,ySTART),100.0f);
    rise=(double)(yStart-a.get(0).y);
        run=(double)(xStart-a.get(0).x);


}
  public void display() {
    
    //e62939
    //a6e1ff
    //176082
    fill(0xff125634);

    ellipse((float) xPos,(float) yPos,(float) 25,25);
    
  }
  public void update() {
    xPos+=run/2*sped;
    yPos+=rise/2*sped;
  }
  
  
  
  public List<Point> bls(Point pointA,
            Point pointB, Point center, double radius) {
        double baX = pointB.x - pointA.x;
        double baY = pointB.y - pointA.y;
        double caX = center.x - pointA.x;
        double caY = center.y - pointA.y;

        double a = baX * baX + baY * baY;
        double bBy2 = baX * caX + baY * caY;
        double c = caX * caX + caY * caY - radius * radius;

        double pBy2 = bBy2 / a;
        double q = c / a;

        double disc = pBy2 * pBy2 - q;
        if (disc < 0) {
            return Collections.emptyList();
        }
        // if disc == 0 ... dealt with later
        double tmpSqrt = Math.sqrt(disc);
        double abScalingFactor1 = -pBy2 + tmpSqrt;
        double abScalingFactor2 = -pBy2 - tmpSqrt;

        Point p1 = new Point(pointA.x - baX * abScalingFactor1, pointA.y
                - baY * abScalingFactor1);
        if (disc == 0) { // abScalingFactor1 == abScalingFactor2
            return Collections.singletonList(p1);
        }
        Point p2 = new Point(pointA.x - baX * abScalingFactor2, pointA.y
                - baY * abScalingFactor2);
        return Arrays.asList(p1, p2);
    
  
}

  public boolean contact(Nongamer f) {
    double b= Math.sqrt(((f.xPos-this.xPos)*(f.xPos-this.xPos))+((f.yPos-this.yPos)*(f.yPos-this.yPos)));
if(b<=75) {
  
 return true; 
}
return false;
    
  }

 public boolean contact(Boss f) {
    double b= Math.sqrt(((f.xPos-this.xPos)*(f.xPos-this.xPos))+((f.yPos-this.yPos)*(f.yPos-this.yPos)));
if(b<=125) {
  
 return true; 
}
return false;
    
  }



}






class Characters {

  double x= 1920/2;
  double y = 1080/2;
int stepSize = 12;
  
  
  
  //                             da upgrades but here instead

double movementUPc=1;
int maxlifec = 5;
int ultc=1;
double bulletSc=1;
double reloadc=1;
int shieldc=1;
int bulletDc=1;
  



public void display() {
 // fill(#123456);
// fill(#2d8dd6);
  ellipseMode(RADIUS);
    ellipse((float) x,(float)  y, 50,50);  
    textAlign(CENTER);
  fill(0xff000000);
  textSize(64);

  text(":)",(float)  x, (float) (y+20)); 

    
  }
public void left() {
      x-=stepSize;
  
}
public void right() {
      
 
        x+=stepSize;

}
public void up() {
      
          y-=stepSize;

}
public void down() {
              y+=stepSize;

  
}



}
  public void settings() {  size(displayWidth, displayHeight); }
  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--present", "--window-color=#666666", "--hide-stop", "ms_pain" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
